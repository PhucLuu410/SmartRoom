
DHT22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004c10  08004c10  00014c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d18  08004d18  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004d18  08004d18  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d18  08004d18  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000060  08004d80  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08004d80  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed79  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000282f  00000000  00000000  0002ee45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00031678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7d  00000000  00000000  00032690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018fbe  00000000  00000000  0003330d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f22  00000000  00000000  0004c2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d074  00000000  00000000  0005f1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048b4  00000000  00000000  000ec264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f0b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bf8 	.word	0x08004bf8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08004bf8 	.word	0x08004bf8

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__gesf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295
 80004d4:	e006      	b.n	80004e4 <__cmpsf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__lesf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpsf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpsf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004fa:	d011      	beq.n	8000520 <__cmpsf2+0x40>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000502:	bf18      	it	ne
 8000504:	ea90 0f01 	teqne	r0, r1
 8000508:	bf58      	it	pl
 800050a:	ebb2 0003 	subspl.w	r0, r2, r3
 800050e:	bf88      	it	hi
 8000510:	17c8      	asrhi	r0, r1, #31
 8000512:	bf38      	it	cc
 8000514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000518:	bf18      	it	ne
 800051a:	f040 0001 	orrne.w	r0, r0, #1
 800051e:	4770      	bx	lr
 8000520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000524:	d102      	bne.n	800052c <__cmpsf2+0x4c>
 8000526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800052a:	d105      	bne.n	8000538 <__cmpsf2+0x58>
 800052c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000530:	d1e4      	bne.n	80004fc <__cmpsf2+0x1c>
 8000532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000536:	d0e1      	beq.n	80004fc <__cmpsf2+0x1c>
 8000538:	f85d 0b04 	ldr.w	r0, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_cfrcmple>:
 8000540:	4684      	mov	ip, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4661      	mov	r1, ip
 8000546:	e7ff      	b.n	8000548 <__aeabi_cfcmpeq>

08000548 <__aeabi_cfcmpeq>:
 8000548:	b50f      	push	{r0, r1, r2, r3, lr}
 800054a:	f7ff ffc9 	bl	80004e0 <__cmpsf2>
 800054e:	2800      	cmp	r0, #0
 8000550:	bf48      	it	mi
 8000552:	f110 0f00 	cmnmi.w	r0, #0
 8000556:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000558 <__aeabi_fcmpeq>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff fff4 	bl	8000548 <__aeabi_cfcmpeq>
 8000560:	bf0c      	ite	eq
 8000562:	2001      	moveq	r0, #1
 8000564:	2000      	movne	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_fcmplt>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffea 	bl	8000548 <__aeabi_cfcmpeq>
 8000574:	bf34      	ite	cc
 8000576:	2001      	movcc	r0, #1
 8000578:	2000      	movcs	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_fcmple>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffe0 	bl	8000548 <__aeabi_cfcmpeq>
 8000588:	bf94      	ite	ls
 800058a:	2001      	movls	r0, #1
 800058c:	2000      	movhi	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_fcmpge>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffd2 	bl	8000540 <__aeabi_cfrcmple>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_fcmpgt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffc8 	bl	8000540 <__aeabi_cfrcmple>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_f2uiz>:
 80005bc:	0042      	lsls	r2, r0, #1
 80005be:	d20e      	bcs.n	80005de <__aeabi_f2uiz+0x22>
 80005c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005c4:	d30b      	bcc.n	80005de <__aeabi_f2uiz+0x22>
 80005c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ce:	d409      	bmi.n	80005e4 <__aeabi_f2uiz+0x28>
 80005d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005d8:	fa23 f002 	lsr.w	r0, r3, r2
 80005dc:	4770      	bx	lr
 80005de:	f04f 0000 	mov.w	r0, #0
 80005e2:	4770      	bx	lr
 80005e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005e8:	d101      	bne.n	80005ee <__aeabi_f2uiz+0x32>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	d102      	bne.n	80005f4 <__aeabi_f2uiz+0x38>
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	4770      	bx	lr
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  lineUp();
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	889b      	ldrh	r3, [r3, #4]
 800061a:	2201      	movs	r2, #1
 800061c:	4619      	mov	r1, r3
 800061e:	f002 f9d0 	bl	80029c2 <HAL_GPIO_WritePin>

  //Настройка порта на выход
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	889b      	ldrh	r3, [r3, #4]
 8000626:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8000628:	2311      	movs	r3, #17
 800062a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	79db      	ldrb	r3, [r3, #7]
 8000630:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000632:	2303      	movs	r3, #3
 8000634:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f107 0208 	add.w	r2, r7, #8
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f002 f823 	bl	800268c <HAL_GPIO_Init>
}
 8000646:	bf00      	nop
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 800064e:	b580      	push	{r7, lr}
 8000650:	b086      	sub	sp, #24
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	889b      	ldrh	r3, [r3, #4]
 8000668:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	79db      	ldrb	r3, [r3, #7]
 8000672:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f107 0208 	add.w	r2, r7, #8
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f002 f804 	bl	800268c <HAL_GPIO_Init>
}
 8000684:	bf00      	nop
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 8000696:	4a76      	ldr	r2, [pc, #472]	; (8000870 <DHT_getData+0x1e4>)
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a0:	e883 0003 	stmia.w	r3, {r0, r1}

	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	799b      	ldrb	r3, [r3, #6]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d103      	bne.n	80006b4 <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 80006ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80006b2:	e002      	b.n	80006ba <DHT_getData+0x2e>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 80006b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b8:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 80006ba:	f001 fcd5 	bl	8002068 <HAL_GetTick>
 80006be:	4602      	mov	r2, r0
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	1ad2      	subs	r2, r2, r3
 80006c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d212      	bcs.n	80006f2 <DHT_getData+0x66>
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00e      	beq.n	80006f2 <DHT_getData+0x66>
		data.hum = sensor->lastHum;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	617b      	str	r3, [r7, #20]
		data.temp = sensor->lastTemp;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	61bb      	str	r3, [r7, #24]
		return data;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	461a      	mov	r2, r3
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80006f0:	e166      	b.n	80009c0 <DHT_getData+0x334>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 80006f2:	f001 fcb9 	bl	8002068 <HAL_GetTick>
 80006f6:	4603      	mov	r3, r0
 80006f8:	1c5a      	adds	r2, r3, #1
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 80006fe:	6838      	ldr	r0, [r7, #0]
 8000700:	f7ff ff7c 	bl	80005fc <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	889b      	ldrh	r3, [r3, #4]
 800070c:	2200      	movs	r2, #0
 800070e:	4619      	mov	r1, r3
 8000710:	f002 f957 	bl	80029c2 <HAL_GPIO_WritePin>
	Delay(18);
 8000714:	2012      	movs	r0, #18
 8000716:	f001 fcb1 	bl	800207c <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	889b      	ldrh	r3, [r3, #4]
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	f002 f94c 	bl	80029c2 <HAL_GPIO_WritePin>
	goToInput(sensor);
 800072a:	6838      	ldr	r0, [r7, #0]
 800072c:	f7ff ff8f 	bl	800064e <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Ожидание спада
	while(getLine()) {
 8000738:	e01a      	b.n	8000770 <DHT_getData+0xe4>
		timeout++;
 800073a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800073c:	3301      	adds	r3, #1
 800073e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 8000740:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000742:	f242 7210 	movw	r2, #10000	; 0x2710
 8000746:	4293      	cmp	r3, r2
 8000748:	d912      	bls.n	8000770 <DHT_getData+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 800074a:	b662      	cpsie	i
}
 800074c:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 8000754:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 800075c:	60da      	str	r2, [r3, #12]

			return data;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	461a      	mov	r2, r3
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	e893 0003 	ldmia.w	r3, {r0, r1}
 800076a:	e882 0003 	stmia.w	r2, {r0, r1}
 800076e:	e127      	b.n	80009c0 <DHT_getData+0x334>
	while(getLine()) {
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	889b      	ldrh	r3, [r3, #4]
 8000778:	4619      	mov	r1, r3
 800077a:	4610      	mov	r0, r2
 800077c:	f002 f90a 	bl	8002994 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d0d9      	beq.n	800073a <DHT_getData+0xae>
		}
	}
	timeout = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Ожидание подъёма
	while(!getLine()) {
 800078a:	e01a      	b.n	80007c2 <DHT_getData+0x136>
		timeout++;
 800078c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800078e:	3301      	adds	r3, #1
 8000790:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 8000792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000794:	f242 7210 	movw	r2, #10000	; 0x2710
 8000798:	4293      	cmp	r3, r2
 800079a:	d912      	bls.n	80007c2 <DHT_getData+0x136>
  __ASM volatile ("cpsie i" : : : "memory");
 800079c:	b662      	cpsie	i
}
 800079e:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80007a6:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80007ae:	60da      	str	r2, [r3, #12]

			return data;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	461a      	mov	r2, r3
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80007c0:	e0fe      	b.n	80009c0 <DHT_getData+0x334>
	while(!getLine()) {
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	889b      	ldrh	r3, [r3, #4]
 80007ca:	4619      	mov	r1, r3
 80007cc:	4610      	mov	r0, r2
 80007ce:	f002 f8e1 	bl	8002994 <HAL_GPIO_ReadPin>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d1d9      	bne.n	800078c <DHT_getData+0x100>
		}
	}
	timeout = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Ожидание спада
	while(getLine()) {
 80007dc:	e012      	b.n	8000804 <DHT_getData+0x178>
		timeout++;
 80007de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007e0:	3301      	adds	r3, #1
 80007e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 80007e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d90a      	bls.n	8000804 <DHT_getData+0x178>
  __ASM volatile ("cpsie i" : : : "memory");
 80007ee:	b662      	cpsie	i
}
 80007f0:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	461a      	mov	r2, r3
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007fe:	e882 0003 	stmia.w	r2, {r0, r1}
 8000802:	e0dd      	b.n	80009c0 <DHT_getData+0x334>
	while(getLine()) {
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	889b      	ldrh	r3, [r3, #4]
 800080c:	4619      	mov	r1, r3
 800080e:	4610      	mov	r0, r2
 8000810:	f002 f8c0 	bl	8002994 <HAL_GPIO_ReadPin>
 8000814:	4603      	mov	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d0e1      	beq.n	80007de <DHT_getData+0x152>
		}
	}

	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <DHT_getData+0x1e8>)
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000824:	6018      	str	r0, [r3, #0]
 8000826:	3304      	adds	r3, #4
 8000828:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 800082a:	2300      	movs	r3, #0
 800082c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000830:	e05d      	b.n	80008ee <DHT_getData+0x262>
		for(uint8_t b = 7; b != 255; b--) {
 8000832:	2307      	movs	r3, #7
 8000834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000838:	e050      	b.n	80008dc <DHT_getData+0x250>
			uint16_t hT = 0, lT = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	843b      	strh	r3, [r7, #32]
 800083e:	2300      	movs	r3, #0
 8000840:	83fb      	strh	r3, [r7, #30]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 8000842:	e002      	b.n	800084a <DHT_getData+0x1be>
 8000844:	8bfb      	ldrh	r3, [r7, #30]
 8000846:	3301      	adds	r3, #1
 8000848:	83fb      	strh	r3, [r7, #30]
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	889b      	ldrh	r3, [r3, #4]
 8000852:	4619      	mov	r1, r3
 8000854:	4610      	mov	r0, r2
 8000856:	f002 f89d 	bl	8002994 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	d004      	beq.n	800086a <DHT_getData+0x1de>
 8000860:	8bfb      	ldrh	r3, [r7, #30]
 8000862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000866:	4293      	cmp	r3, r2
 8000868:	d1ec      	bne.n	8000844 <DHT_getData+0x1b8>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	84bb      	strh	r3, [r7, #36]	; 0x24
			while(getLine()&& hT != 65535) hT++;
 800086e:	e006      	b.n	800087e <DHT_getData+0x1f2>
 8000870:	08004c10 	.word	0x08004c10
 8000874:	08004c18 	.word	0x08004c18
 8000878:	8c3b      	ldrh	r3, [r7, #32]
 800087a:	3301      	adds	r3, #1
 800087c:	843b      	strh	r3, [r7, #32]
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	889b      	ldrh	r3, [r3, #4]
 8000886:	4619      	mov	r1, r3
 8000888:	4610      	mov	r0, r2
 800088a:	f002 f883 	bl	8002994 <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	2b01      	cmp	r3, #1
 8000892:	d104      	bne.n	800089e <DHT_getData+0x212>
 8000894:	8c3b      	ldrh	r3, [r7, #32]
 8000896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800089a:	4293      	cmp	r3, r2
 800089c:	d1ec      	bne.n	8000878 <DHT_getData+0x1ec>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 800089e:	8c3a      	ldrh	r2, [r7, #32]
 80008a0:	8bfb      	ldrh	r3, [r7, #30]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d915      	bls.n	80008d2 <DHT_getData+0x246>
 80008a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008aa:	3328      	adds	r3, #40	; 0x28
 80008ac:	443b      	add	r3, r7
 80008ae:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80008b2:	b25a      	sxtb	r2, r3
 80008b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008b8:	2101      	movs	r1, #1
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	4313      	orrs	r3, r2
 80008c2:	b25a      	sxtb	r2, r3
 80008c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	3328      	adds	r3, #40	; 0x28
 80008cc:	443b      	add	r3, r7
 80008ce:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 80008d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008d6:	3b01      	subs	r3, #1
 80008d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80008dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008e0:	2bff      	cmp	r3, #255	; 0xff
 80008e2:	d1aa      	bne.n	800083a <DHT_getData+0x1ae>
	for(uint8_t a = 0; a < 5; a++) {
 80008e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008e8:	3301      	adds	r3, #1
 80008ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80008ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d99d      	bls.n	8000832 <DHT_getData+0x1a6>
  __ASM volatile ("cpsie i" : : : "memory");
 80008f6:	b662      	cpsie	i
}
 80008f8:	bf00      	nop
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 80008fa:	7b3a      	ldrb	r2, [r7, #12]
 80008fc:	7b7b      	ldrb	r3, [r7, #13]
 80008fe:	4413      	add	r3, r2
 8000900:	b2da      	uxtb	r2, r3
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	4413      	add	r3, r2
 8000906:	b2da      	uxtb	r2, r3
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	4413      	add	r3, r2
 800090c:	b2da      	uxtb	r2, r3
 800090e:	7c3b      	ldrb	r3, [r7, #16]
 8000910:	429a      	cmp	r2, r3
 8000912:	d147      	bne.n	80009a4 <DHT_getData+0x318>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	799b      	ldrb	r3, [r3, #6]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d133      	bne.n	8000984 <DHT_getData+0x2f8>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 800091c:	7b3b      	ldrb	r3, [r7, #12]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	7b7a      	ldrb	r2, [r7, #13]
 8000922:	4313      	orrs	r3, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fd7f 	bl	8000428 <__aeabi_i2f>
 800092a:	4603      	mov	r3, r0
 800092c:	4926      	ldr	r1, [pc, #152]	; (80009c8 <DHT_getData+0x33c>)
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fc0c 	bl	800014c <__aeabi_fmul>
 8000934:	4603      	mov	r3, r0
 8000936:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8000938:	7bbb      	ldrb	r3, [r7, #14]
 800093a:	b25b      	sxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0e      	blt.n	800095e <DHT_getData+0x2d2>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8000940:	7bbb      	ldrb	r3, [r7, #14]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	7bfa      	ldrb	r2, [r7, #15]
 8000946:	4313      	orrs	r3, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fd6d 	bl	8000428 <__aeabi_i2f>
 800094e:	4603      	mov	r3, r0
 8000950:	491d      	ldr	r1, [pc, #116]	; (80009c8 <DHT_getData+0x33c>)
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fbfa 	bl	800014c <__aeabi_fmul>
 8000958:	4603      	mov	r3, r0
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	e012      	b.n	8000984 <DHT_getData+0x2f8>
			}	else {
				rawData[2] &= ~(1<<7);
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000964:	b2db      	uxtb	r3, r3
 8000966:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8000968:	7bbb      	ldrb	r3, [r7, #14]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	7bfa      	ldrb	r2, [r7, #15]
 800096e:	4313      	orrs	r3, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fd59 	bl	8000428 <__aeabi_i2f>
 8000976:	4603      	mov	r3, r0
 8000978:	4914      	ldr	r1, [pc, #80]	; (80009cc <DHT_getData+0x340>)
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fbe6 	bl	800014c <__aeabi_fmul>
 8000980:	4603      	mov	r3, r0
 8000982:	61bb      	str	r3, [r7, #24]
			}
		}
		if (sensor->type == DHT11) {
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	799b      	ldrb	r3, [r3, #6]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d10b      	bne.n	80009a4 <DHT_getData+0x318>
			data.hum = (float)rawData[0];
 800098c:	7b3b      	ldrb	r3, [r7, #12]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fd46 	bl	8000420 <__aeabi_ui2f>
 8000994:	4603      	mov	r3, r0
 8000996:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];
 8000998:	7bbb      	ldrb	r3, [r7, #14]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fd40 	bl	8000420 <__aeabi_ui2f>
 80009a0:	4603      	mov	r3, r0
 80009a2:	61bb      	str	r3, [r7, #24]
		}
	}

	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	60da      	str	r2, [r3, #12]
	#endif

	return data;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	461a      	mov	r2, r3
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009bc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	3dcccccd 	.word	0x3dcccccd
 80009cc:	bdcccccd 	.word	0xbdcccccd

080009d0 <FlashErase>:
 *      Author: ASUS
 */
#include <Flash.h>

void FlashErase (uint32_t address)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80009d8:	f001 fcc8 	bl	800236c <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.Banks = 1;
 80009dc:	2301      	movs	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbPages = 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.PageAddress = address;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
	uint32_t pageeerr;
	HAL_FLASHEx_Erase(&EraseInitStruct , &pageeerr);
 80009ec:	f107 020c 	add.w	r2, r7, #12
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fda0 	bl	800253c <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80009fc:	f001 fcdc 	bl	80023b8 <HAL_FLASH_Lock>
}
 8000a00:	bf00      	nop
 8000a02:	3720      	adds	r7, #32
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <FlashWrite>:
void FlashWrite (int value , uint32_t address)
{
 8000a08:	b5b0      	push	{r4, r5, r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8000a12:	f001 fcab 	bl	800236c <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD , address , value);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	17da      	asrs	r2, r3, #31
 8000a1a:	461c      	mov	r4, r3
 8000a1c:	4615      	mov	r5, r2
 8000a1e:	4622      	mov	r2, r4
 8000a20:	462b      	mov	r3, r5
 8000a22:	6839      	ldr	r1, [r7, #0]
 8000a24:	2001      	movs	r0, #1
 8000a26:	f001 fc31 	bl	800228c <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000a2a:	f001 fcc5 	bl	80023b8 <HAL_FLASH_Lock>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bdb0      	pop	{r4, r5, r7, pc}

08000a36 <FlashRead>:
int FlashRead (uint32_t address)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
	return  *(__IO uint16_t*) (address);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	b29b      	uxth	r3, r3
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
	...

08000a50 <LCD_Enable>:
#include "lcd20x4.h"
#include "stm32f1xx_hal.h"
#include <stdio.h>
static void LCD_Enable(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5a:	4808      	ldr	r0, [pc, #32]	; (8000a7c <LCD_Enable+0x2c>)
 8000a5c:	f001 ffb1 	bl	80029c2 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f001 fb0b 	bl	800207c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <LCD_Enable+0x2c>)
 8000a6e:	f001 ffa8 	bl	80029c2 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f001 fb02 	bl	800207c <HAL_Delay>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40010800 	.word	0x40010800

08000a80 <LCD_SendNibble>:

static void LCD_SendNibble(uint8_t nibble) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (nibble >> 0) & 0x01);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a98:	4816      	ldr	r0, [pc, #88]	; (8000af4 <LCD_SendNibble+0x74>)
 8000a9a:	f001 ff92 	bl	80029c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (nibble >> 1) & 0x01);
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	085b      	lsrs	r3, r3, #1
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab0:	4810      	ldr	r0, [pc, #64]	; (8000af4 <LCD_SendNibble+0x74>)
 8000ab2:	f001 ff86 	bl	80029c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (nibble >> 2) & 0x01);
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac8:	480a      	ldr	r0, [pc, #40]	; (8000af4 <LCD_SendNibble+0x74>)
 8000aca:	f001 ff7a 	bl	80029c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (nibble >> 3) & 0x01);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	08db      	lsrs	r3, r3, #3
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	461a      	mov	r2, r3
 8000adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <LCD_SendNibble+0x74>)
 8000ae2:	f001 ff6e 	bl	80029c2 <HAL_GPIO_WritePin>
    LCD_Enable();
 8000ae6:	f7ff ffb3 	bl	8000a50 <LCD_Enable>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40010800 	.word	0x40010800

08000af8 <LCD_Init>:

void LCD_Init(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
    // Configure GPIO pins
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	463b      	mov	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_EN_Pin | LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
 8000b0a:	f641 7301 	movw	r3, #7937	; 0x1f01
 8000b0e:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4817      	ldr	r0, [pc, #92]	; (8000b80 <LCD_Init+0x88>)
 8000b22:	f001 fdb3 	bl	800268c <HAL_GPIO_Init>

    // Initialization sequence
    HAL_Delay(50); // Wait for LCD to power up
 8000b26:	2032      	movs	r0, #50	; 0x32
 8000b28:	f001 faa8 	bl	800207c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4813      	ldr	r0, [pc, #76]	; (8000b80 <LCD_Init+0x88>)
 8000b32:	f001 ff46 	bl	80029c2 <HAL_GPIO_WritePin>
    LCD_SendNibble(0x03);
 8000b36:	2003      	movs	r0, #3
 8000b38:	f7ff ffa2 	bl	8000a80 <LCD_SendNibble>
    HAL_Delay(5);
 8000b3c:	2005      	movs	r0, #5
 8000b3e:	f001 fa9d 	bl	800207c <HAL_Delay>
    LCD_SendNibble(0x03);
 8000b42:	2003      	movs	r0, #3
 8000b44:	f7ff ff9c 	bl	8000a80 <LCD_SendNibble>
    HAL_Delay(1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f001 fa97 	bl	800207c <HAL_Delay>
    LCD_SendNibble(0x03);
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f7ff ff96 	bl	8000a80 <LCD_SendNibble>
    LCD_SendNibble(0x02);
 8000b54:	2002      	movs	r0, #2
 8000b56:	f7ff ff93 	bl	8000a80 <LCD_SendNibble>

    // Configure LCD
    LCD_SendCommand(0x28); // Function set: 4-bit mode, 2 lines, 5x8 dots
 8000b5a:	2028      	movs	r0, #40	; 0x28
 8000b5c:	f000 f812 	bl	8000b84 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display on, cursor off, no blink
 8000b60:	200c      	movs	r0, #12
 8000b62:	f000 f80f 	bl	8000b84 <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode: increment automatically, no display shift
 8000b66:	2006      	movs	r0, #6
 8000b68:	f000 f80c 	bl	8000b84 <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f000 f809 	bl	8000b84 <LCD_SendCommand>
    HAL_Delay(2);
 8000b72:	2002      	movs	r0, #2
 8000b74:	f001 fa82 	bl	800207c <HAL_Delay>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40010c00 	.word	0x40010c00

08000b84 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2101      	movs	r1, #1
 8000b92:	480a      	ldr	r0, [pc, #40]	; (8000bbc <LCD_SendCommand+0x38>)
 8000b94:	f001 ff15 	bl	80029c2 <HAL_GPIO_WritePin>
    LCD_SendNibble(cmd >> 4);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	091b      	lsrs	r3, r3, #4
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff6e 	bl	8000a80 <LCD_SendNibble>
    LCD_SendNibble(cmd & 0x0F);
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff67 	bl	8000a80 <LCD_SendNibble>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40010c00 	.word	0x40010c00

08000bc0 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2101      	movs	r1, #1
 8000bce:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <LCD_SendData+0x38>)
 8000bd0:	f001 fef7 	bl	80029c2 <HAL_GPIO_WritePin>
    LCD_SendNibble(data >> 4);
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	091b      	lsrs	r3, r3, #4
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff50 	bl	8000a80 <LCD_SendNibble>
    LCD_SendNibble(data & 0x0F);
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff49 	bl	8000a80 <LCD_SendNibble>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40010c00 	.word	0x40010c00

08000bfc <LCD_SendString>:

void LCD_SendString(char *str) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000c04:	e006      	b.n	8000c14 <LCD_SendString+0x18>
        LCD_SendData(*str++);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	1c5a      	adds	r2, r3, #1
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ffd6 	bl	8000bc0 <LCD_SendData>
    while (*str) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d1f4      	bne.n	8000c06 <LCD_SendString+0xa>
    }
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	460a      	mov	r2, r1
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	4613      	mov	r3, r2
 8000c36:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d819      	bhi.n	8000c72 <LCD_SetCursor+0x4a>
 8000c3e:	a201      	add	r2, pc, #4	; (adr r2, 8000c44 <LCD_SetCursor+0x1c>)
 8000c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c44:	08000c55 	.word	0x08000c55
 8000c48:	08000c5b 	.word	0x08000c5b
 8000c4c:	08000c63 	.word	0x08000c63
 8000c50:	08000c6b 	.word	0x08000c6b
        case 0: address = 0x00 + col; break;
 8000c54:	79bb      	ldrb	r3, [r7, #6]
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e00e      	b.n	8000c78 <LCD_SetCursor+0x50>
        case 1: address = 0x40 + col; break;
 8000c5a:	79bb      	ldrb	r3, [r7, #6]
 8000c5c:	3340      	adds	r3, #64	; 0x40
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	e00a      	b.n	8000c78 <LCD_SetCursor+0x50>
        case 2: address = 0x14 + col; break;
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	3314      	adds	r3, #20
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e006      	b.n	8000c78 <LCD_SetCursor+0x50>
        case 3: address = 0x54 + col; break;
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	3354      	adds	r3, #84	; 0x54
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	e002      	b.n	8000c78 <LCD_SetCursor+0x50>
        default: address = 0x00 + col; break;
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	73fb      	strb	r3, [r7, #15]
 8000c76:	bf00      	nop
    }
    LCD_SendCommand(0x80 | address);
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff7f 	bl	8000b84 <LCD_SendCommand>
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop

08000c90 <LCD_Clear>:

void LCD_Clear(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01); // Clear display
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff ff75 	bl	8000b84 <LCD_SendCommand>
    HAL_Delay(2);
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	f001 f9ee 	bl	800207c <HAL_Delay>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <LCD_PrintInt>:
void LCD_PrintInt(int num) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    char buffer[16]; // Đủ lớn để chứa số nguyên và ký tự null
    sprintf(buffer, "%d", num);
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4906      	ldr	r1, [pc, #24]	; (8000ccc <LCD_PrintInt+0x28>)
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f003 faed 	bl	8004294 <siprintf>
    LCD_SendString(buffer);
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff9c 	bl	8000bfc <LCD_SendString>
}
 8000cc4:	bf00      	nop
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	08004c20 	.word	0x08004c20

08000cd0 <hienthi>:
#include <ShowScreen.h>
#include <LCD20x4.h>


void hienthi (uint16_t NhietDo , uint16_t DoAm)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460a      	mov	r2, r1
 8000cda:	80fb      	strh	r3, [r7, #6]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(0,0);
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff ffa0 	bl	8000c28 <LCD_SetCursor>
	LCD_SendString("Nhiet do:");
 8000ce8:	4815      	ldr	r0, [pc, #84]	; (8000d40 <hienthi+0x70>)
 8000cea:	f7ff ff87 	bl	8000bfc <LCD_SendString>
	LCD_SetCursor(0,11);
 8000cee:	210b      	movs	r1, #11
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f7ff ff99 	bl	8000c28 <LCD_SetCursor>
	LCD_SendString("        ");
 8000cf6:	4813      	ldr	r0, [pc, #76]	; (8000d44 <hienthi+0x74>)
 8000cf8:	f7ff ff80 	bl	8000bfc <LCD_SendString>
	LCD_SetCursor(0,11);
 8000cfc:	210b      	movs	r1, #11
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff ff92 	bl	8000c28 <LCD_SetCursor>
	LCD_PrintInt(NhietDo);
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ffcc 	bl	8000ca4 <LCD_PrintInt>
	LCD_SetCursor(1,0);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f7ff ff8a 	bl	8000c28 <LCD_SetCursor>
	LCD_SendString("Do am:");
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <hienthi+0x78>)
 8000d16:	f7ff ff71 	bl	8000bfc <LCD_SendString>
	LCD_SetCursor(1,11);
 8000d1a:	210b      	movs	r1, #11
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff ff83 	bl	8000c28 <LCD_SetCursor>
	LCD_SendString("        ");
 8000d22:	4808      	ldr	r0, [pc, #32]	; (8000d44 <hienthi+0x74>)
 8000d24:	f7ff ff6a 	bl	8000bfc <LCD_SendString>
	LCD_SetCursor(1,11);
 8000d28:	210b      	movs	r1, #11
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff ff7c 	bl	8000c28 <LCD_SetCursor>
	LCD_PrintInt(DoAm);
 8000d30:	88bb      	ldrh	r3, [r7, #4]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ffb6 	bl	8000ca4 <LCD_PrintInt>

}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	08004c24 	.word	0x08004c24
 8000d44:	08004c30 	.word	0x08004c30
 8000d48:	08004c3c 	.word	0x08004c3c

08000d4c <Normal>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Normal(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BuzzerPort, BuzzerPin, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2104      	movs	r1, #4
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <Normal+0x1c>)
 8000d56:	f001 fe34 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LedPort, LedPin, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	4802      	ldr	r0, [pc, #8]	; (8000d68 <Normal+0x1c>)
 8000d60:	f001 fe2f 	bl	80029c2 <HAL_GPIO_WritePin>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40010800 	.word	0x40010800

08000d6c <Warning>:

void Warning(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(BuzzerPort, BuzzerPin);
 8000d70:	2104      	movs	r1, #4
 8000d72:	4804      	ldr	r0, [pc, #16]	; (8000d84 <Warning+0x18>)
 8000d74:	f001 fe3d 	bl	80029f2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LedPort, LedPin);
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4802      	ldr	r0, [pc, #8]	; (8000d84 <Warning+0x18>)
 8000d7c:	f001 fe39 	bl	80029f2 <HAL_GPIO_TogglePin>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40010800 	.word	0x40010800

08000d88 <PressSound>:

void PressSound(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(BuzzerPort, BuzzerPin);
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	480a      	ldr	r0, [pc, #40]	; (8000db8 <PressSound+0x30>)
 8000d90:	f001 fe2f 	bl	80029f2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LedPort, LedPin);
 8000d94:	2102      	movs	r1, #2
 8000d96:	4808      	ldr	r0, [pc, #32]	; (8000db8 <PressSound+0x30>)
 8000d98:	f001 fe2b 	bl	80029f2 <HAL_GPIO_TogglePin>
	HAL_Delay(20);
 8000d9c:	2014      	movs	r0, #20
 8000d9e:	f001 f96d 	bl	800207c <HAL_Delay>
	HAL_GPIO_TogglePin(BuzzerPort, BuzzerPin);
 8000da2:	2104      	movs	r1, #4
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <PressSound+0x30>)
 8000da6:	f001 fe24 	bl	80029f2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LedPort, LedPin);
 8000daa:	2102      	movs	r1, #2
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <PressSound+0x30>)
 8000dae:	f001 fe20 	bl	80029f2 <HAL_GPIO_TogglePin>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40010800 	.word	0x40010800

08000dbc <Mode>:

void Mode(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	if (menu == 0)
 8000dc0:	4b86      	ldr	r3, [pc, #536]	; (8000fdc <Mode+0x220>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	f083 0301 	eor.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d029      	beq.n	8000e22 <Mode+0x66>
	{
		hienthi(NhietDo, DoAm);
 8000dce:	4b84      	ldr	r3, [pc, #528]	; (8000fe0 <Mode+0x224>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	4a84      	ldr	r2, [pc, #528]	; (8000fe4 <Mode+0x228>)
 8000dd4:	8812      	ldrh	r2, [r2, #0]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff79 	bl	8000cd0 <hienthi>
		if (HAL_GPIO_ReadPin(GPIOA, Menu) == 0)
 8000dde:	2108      	movs	r1, #8
 8000de0:	4881      	ldr	r0, [pc, #516]	; (8000fe8 <Mode+0x22c>)
 8000de2:	f001 fdd7 	bl	8002994 <HAL_GPIO_ReadPin>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d11a      	bne.n	8000e22 <Mode+0x66>
		{
			while (HAL_GPIO_ReadPin(GPIOA, Menu) == 0){}
 8000dec:	bf00      	nop
 8000dee:	2108      	movs	r1, #8
 8000df0:	487d      	ldr	r0, [pc, #500]	; (8000fe8 <Mode+0x22c>)
 8000df2:	f001 fdcf 	bl	8002994 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f8      	beq.n	8000dee <Mode+0x32>
			PressSound();
 8000dfc:	f7ff ffc4 	bl	8000d88 <PressSound>
			LCD_Clear();
 8000e00:	f7ff ff46 	bl	8000c90 <LCD_Clear>
			menu = !menu;
 8000e04:	4b75      	ldr	r3, [pc, #468]	; (8000fdc <Mode+0x220>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf14      	ite	ne
 8000e0c:	2301      	movne	r3, #1
 8000e0e:	2300      	moveq	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	f083 0301 	eor.w	r3, r3, #1
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b6f      	ldr	r3, [pc, #444]	; (8000fdc <Mode+0x220>)
 8000e20:	701a      	strb	r2, [r3, #0]
		}
	}
	if (menu == 1)
 8000e22:	4b6e      	ldr	r3, [pc, #440]	; (8000fdc <Mode+0x220>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 81f9 	beq.w	800121e <Mode+0x462>
	{
		LCD_SetCursor(0, 0);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f7ff fefa 	bl	8000c28 <LCD_SetCursor>
		LCD_SendString("Chon gia tri cai dat");
 8000e34:	486d      	ldr	r0, [pc, #436]	; (8000fec <Mode+0x230>)
 8000e36:	f7ff fee1 	bl	8000bfc <LCD_SendString>
		LCD_SetCursor(1, 4);
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff fef3 	bl	8000c28 <LCD_SetCursor>
		LCD_SendString("Nhiet do");
 8000e42:	486b      	ldr	r0, [pc, #428]	; (8000ff0 <Mode+0x234>)
 8000e44:	f7ff feda 	bl	8000bfc <LCD_SendString>
		LCD_SetCursor(2, 4);
 8000e48:	2104      	movs	r1, #4
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f7ff feec 	bl	8000c28 <LCD_SetCursor>
		LCD_SendString("Do am");
 8000e50:	4868      	ldr	r0, [pc, #416]	; (8000ff4 <Mode+0x238>)
 8000e52:	f7ff fed3 	bl	8000bfc <LCD_SendString>


		LCD_SetCursor(i + 1, 0);
 8000e56:	4b68      	ldr	r3, [pc, #416]	; (8000ff8 <Mode+0x23c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fee1 	bl	8000c28 <LCD_SetCursor>
		LCD_SendString("->");
 8000e66:	4865      	ldr	r0, [pc, #404]	; (8000ffc <Mode+0x240>)
 8000e68:	f7ff fec8 	bl	8000bfc <LCD_SendString>
		if (HAL_GPIO_ReadPin(GPIOA, Menu) == 0)
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	485e      	ldr	r0, [pc, #376]	; (8000fe8 <Mode+0x22c>)
 8000e70:	f001 fd90 	bl	8002994 <HAL_GPIO_ReadPin>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d11a      	bne.n	8000eb0 <Mode+0xf4>
		{
			while (HAL_GPIO_ReadPin(GPIOA, Menu) == 0) {}
 8000e7a:	bf00      	nop
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	485a      	ldr	r0, [pc, #360]	; (8000fe8 <Mode+0x22c>)
 8000e80:	f001 fd88 	bl	8002994 <HAL_GPIO_ReadPin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f8      	beq.n	8000e7c <Mode+0xc0>
			PressSound();
 8000e8a:	f7ff ff7d 	bl	8000d88 <PressSound>
			LCD_Clear();
 8000e8e:	f7ff feff 	bl	8000c90 <LCD_Clear>
			menu = !menu;
 8000e92:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <Mode+0x220>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf14      	ite	ne
 8000e9a:	2301      	movne	r3, #1
 8000e9c:	2300      	moveq	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f083 0301 	eor.w	r3, r3, #1
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b4b      	ldr	r3, [pc, #300]	; (8000fdc <Mode+0x220>)
 8000eae:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOA, Tang) == 0)
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	484d      	ldr	r0, [pc, #308]	; (8000fe8 <Mode+0x22c>)
 8000eb4:	f001 fd6e 	bl	8002994 <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d129      	bne.n	8000f12 <Mode+0x156>
		{
			LCD_SetCursor(1, 0);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff feb1 	bl	8000c28 <LCD_SetCursor>
			LCD_SendString("  ");
 8000ec6:	484e      	ldr	r0, [pc, #312]	; (8001000 <Mode+0x244>)
 8000ec8:	f7ff fe98 	bl	8000bfc <LCD_SendString>
			LCD_SetCursor(2, 0);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f7ff feaa 	bl	8000c28 <LCD_SetCursor>
			LCD_SendString("  ");
 8000ed4:	484a      	ldr	r0, [pc, #296]	; (8001000 <Mode+0x244>)
 8000ed6:	f7ff fe91 	bl	8000bfc <LCD_SendString>
			i = !i ;
 8000eda:	4b47      	ldr	r3, [pc, #284]	; (8000ff8 <Mode+0x23c>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bf14      	ite	ne
 8000ee2:	2301      	movne	r3, #1
 8000ee4:	2300      	moveq	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	f083 0301 	eor.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b40      	ldr	r3, [pc, #256]	; (8000ff8 <Mode+0x23c>)
 8000ef6:	701a      	strb	r2, [r3, #0]
			LCD_SetCursor(i + 1, 0);
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <Mode+0x23c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fe90 	bl	8000c28 <LCD_SetCursor>
			LCD_SendString("->");
 8000f08:	483c      	ldr	r0, [pc, #240]	; (8000ffc <Mode+0x240>)
 8000f0a:	f7ff fe77 	bl	8000bfc <LCD_SendString>
			PressSound();
 8000f0e:	f7ff ff3b 	bl	8000d88 <PressSound>
		}
		if (HAL_GPIO_ReadPin(GPIOA, Giam) == 0)
 8000f12:	2120      	movs	r1, #32
 8000f14:	4834      	ldr	r0, [pc, #208]	; (8000fe8 <Mode+0x22c>)
 8000f16:	f001 fd3d 	bl	8002994 <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d129      	bne.n	8000f74 <Mode+0x1b8>
		{
			LCD_SetCursor(1, 0);
 8000f20:	2100      	movs	r1, #0
 8000f22:	2001      	movs	r0, #1
 8000f24:	f7ff fe80 	bl	8000c28 <LCD_SetCursor>
			LCD_SendString("  ");
 8000f28:	4835      	ldr	r0, [pc, #212]	; (8001000 <Mode+0x244>)
 8000f2a:	f7ff fe67 	bl	8000bfc <LCD_SendString>
			LCD_SetCursor(2, 0);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2002      	movs	r0, #2
 8000f32:	f7ff fe79 	bl	8000c28 <LCD_SetCursor>
			LCD_SendString("  ");
 8000f36:	4832      	ldr	r0, [pc, #200]	; (8001000 <Mode+0x244>)
 8000f38:	f7ff fe60 	bl	8000bfc <LCD_SendString>
			i = !i ;
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <Mode+0x23c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	bf14      	ite	ne
 8000f44:	2301      	movne	r3, #1
 8000f46:	2300      	moveq	r3, #0
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f083 0301 	eor.w	r3, r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <Mode+0x23c>)
 8000f58:	701a      	strb	r2, [r3, #0]
			LCD_SetCursor(i - 1, 0);
 8000f5a:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <Mode+0x23c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fe5f 	bl	8000c28 <LCD_SetCursor>
			LCD_SendString("->");
 8000f6a:	4824      	ldr	r0, [pc, #144]	; (8000ffc <Mode+0x240>)
 8000f6c:	f7ff fe46 	bl	8000bfc <LCD_SendString>
			PressSound();
 8000f70:	f7ff ff0a 	bl	8000d88 <PressSound>
		}
		if( HAL_GPIO_ReadPin(GPIOA, Ok) == 0 && i == 0 && ex == 0)
 8000f74:	2140      	movs	r1, #64	; 0x40
 8000f76:	481c      	ldr	r0, [pc, #112]	; (8000fe8 <Mode+0x22c>)
 8000f78:	f001 fd0c 	bl	8002994 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f040 80af 	bne.w	80010e2 <Mode+0x326>
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <Mode+0x23c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	f083 0301 	eor.w	r3, r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 80a7 	beq.w	80010e2 <Mode+0x326>
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <Mode+0x248>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	f083 0301 	eor.w	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 809f 	beq.w	80010e2 <Mode+0x326>
		{
			while(HAL_GPIO_ReadPin(GPIOA, Ok) == 0){}
 8000fa4:	bf00      	nop
 8000fa6:	2140      	movs	r1, #64	; 0x40
 8000fa8:	480f      	ldr	r0, [pc, #60]	; (8000fe8 <Mode+0x22c>)
 8000faa:	f001 fcf3 	bl	8002994 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f8      	beq.n	8000fa6 <Mode+0x1ea>
			PressSound();
 8000fb4:	f7ff fee8 	bl	8000d88 <PressSound>
			ex = !ex;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <Mode+0x248>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	bf14      	ite	ne
 8000fc0:	2301      	movne	r3, #1
 8000fc2:	2300      	moveq	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	f083 0301 	eor.w	r3, r3, #1
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <Mode+0x248>)
 8000fd4:	701a      	strb	r2, [r3, #0]
			LCD_Clear();
 8000fd6:	f7ff fe5b 	bl	8000c90 <LCD_Clear>
			while(ex == 1)
 8000fda:	e07e      	b.n	80010da <Mode+0x31e>
 8000fdc:	20000080 	.word	0x20000080
 8000fe0:	2000007c 	.word	0x2000007c
 8000fe4:	2000007e 	.word	0x2000007e
 8000fe8:	40010800 	.word	0x40010800
 8000fec:	08004c44 	.word	0x08004c44
 8000ff0:	08004c5c 	.word	0x08004c5c
 8000ff4:	08004c68 	.word	0x08004c68
 8000ff8:	20000081 	.word	0x20000081
 8000ffc:	08004c70 	.word	0x08004c70
 8001000:	08004c74 	.word	0x08004c74
 8001004:	20000082 	.word	0x20000082
			{
				LCD_SetCursor(0, 0);
 8001008:	2100      	movs	r1, #0
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff fe0c 	bl	8000c28 <LCD_SetCursor>
				LCD_PrintInt(TempSet);
 8001010:	4b84      	ldr	r3, [pc, #528]	; (8001224 <Mode+0x468>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fe45 	bl	8000ca4 <LCD_PrintInt>
				LCD_SetCursor(1, 0);
 800101a:	2100      	movs	r1, #0
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff fe03 	bl	8000c28 <LCD_SetCursor>
				LCD_SendString("Press OK to setup !!");
 8001022:	4881      	ldr	r0, [pc, #516]	; (8001228 <Mode+0x46c>)
 8001024:	f7ff fdea 	bl	8000bfc <LCD_SendString>
				if (HAL_GPIO_ReadPin(GPIOA, Ok) == 0)
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	4880      	ldr	r0, [pc, #512]	; (800122c <Mode+0x470>)
 800102c:	f001 fcb2 	bl	8002994 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d109      	bne.n	800104a <Mode+0x28e>
				{
					PressSound();
 8001036:	f7ff fea7 	bl	8000d88 <PressSound>
					LCD_Clear();
 800103a:	f7ff fe29 	bl	8000c90 <LCD_Clear>
					ex = 0;
 800103e:	4b7c      	ldr	r3, [pc, #496]	; (8001230 <Mode+0x474>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
					menu = 0;
 8001044:	4b7b      	ldr	r3, [pc, #492]	; (8001234 <Mode+0x478>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
				}
				if (HAL_GPIO_ReadPin(GPIOA, Tang) == 0)
 800104a:	2110      	movs	r1, #16
 800104c:	4877      	ldr	r0, [pc, #476]	; (800122c <Mode+0x470>)
 800104e:	f001 fca1 	bl	8002994 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d11c      	bne.n	8001092 <Mode+0x2d6>
				{
					LCD_SetCursor(0,0);
 8001058:	2100      	movs	r1, #0
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fde4 	bl	8000c28 <LCD_SetCursor>
					LCD_SendString("   ");
 8001060:	4875      	ldr	r0, [pc, #468]	; (8001238 <Mode+0x47c>)
 8001062:	f7ff fdcb 	bl	8000bfc <LCD_SendString>
					FlashErase(ADD_TEMP_DATA);
 8001066:	4875      	ldr	r0, [pc, #468]	; (800123c <Mode+0x480>)
 8001068:	f7ff fcb2 	bl	80009d0 <FlashErase>
					TempSet += 1;
 800106c:	4b6d      	ldr	r3, [pc, #436]	; (8001224 <Mode+0x468>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b6b      	ldr	r3, [pc, #428]	; (8001224 <Mode+0x468>)
 8001076:	701a      	strb	r2, [r3, #0]
					if(TempSet >= 80)
 8001078:	4b6a      	ldr	r3, [pc, #424]	; (8001224 <Mode+0x468>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b4f      	cmp	r3, #79	; 0x4f
 800107e:	d902      	bls.n	8001086 <Mode+0x2ca>
					{
						TempSet = 20;
 8001080:	4b68      	ldr	r3, [pc, #416]	; (8001224 <Mode+0x468>)
 8001082:	2214      	movs	r2, #20
 8001084:	701a      	strb	r2, [r3, #0]
					}
					FlashWrite(TempSet , ADD_TEMP_DATA);
 8001086:	4b67      	ldr	r3, [pc, #412]	; (8001224 <Mode+0x468>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	496c      	ldr	r1, [pc, #432]	; (800123c <Mode+0x480>)
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fcbb 	bl	8000a08 <FlashWrite>
				}
				if (HAL_GPIO_ReadPin(GPIOA, Giam) == 0)
 8001092:	2120      	movs	r1, #32
 8001094:	4865      	ldr	r0, [pc, #404]	; (800122c <Mode+0x470>)
 8001096:	f001 fc7d 	bl	8002994 <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d11c      	bne.n	80010da <Mode+0x31e>
				{
					LCD_SetCursor(0,0);
 80010a0:	2100      	movs	r1, #0
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff fdc0 	bl	8000c28 <LCD_SetCursor>
					LCD_SendString("   ");
 80010a8:	4863      	ldr	r0, [pc, #396]	; (8001238 <Mode+0x47c>)
 80010aa:	f7ff fda7 	bl	8000bfc <LCD_SendString>
					FlashErase(ADD_TEMP_DATA);
 80010ae:	4863      	ldr	r0, [pc, #396]	; (800123c <Mode+0x480>)
 80010b0:	f7ff fc8e 	bl	80009d0 <FlashErase>
					TempSet -= 1;
 80010b4:	4b5b      	ldr	r3, [pc, #364]	; (8001224 <Mode+0x468>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b59      	ldr	r3, [pc, #356]	; (8001224 <Mode+0x468>)
 80010be:	701a      	strb	r2, [r3, #0]
					if(TempSet <= 20)
 80010c0:	4b58      	ldr	r3, [pc, #352]	; (8001224 <Mode+0x468>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b14      	cmp	r3, #20
 80010c6:	d802      	bhi.n	80010ce <Mode+0x312>
					{
						TempSet = 80;
 80010c8:	4b56      	ldr	r3, [pc, #344]	; (8001224 <Mode+0x468>)
 80010ca:	2250      	movs	r2, #80	; 0x50
 80010cc:	701a      	strb	r2, [r3, #0]
					}
					FlashWrite(TempSet , ADD_TEMP_DATA);
 80010ce:	4b55      	ldr	r3, [pc, #340]	; (8001224 <Mode+0x468>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	495a      	ldr	r1, [pc, #360]	; (800123c <Mode+0x480>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fc97 	bl	8000a08 <FlashWrite>
			while(ex == 1)
 80010da:	4b55      	ldr	r3, [pc, #340]	; (8001230 <Mode+0x474>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d192      	bne.n	8001008 <Mode+0x24c>
				}
			}
		}
		if (HAL_GPIO_ReadPin(GPIOA, Ok) == 0 && i == 1 && ex == 0)
 80010e2:	2140      	movs	r1, #64	; 0x40
 80010e4:	4851      	ldr	r0, [pc, #324]	; (800122c <Mode+0x470>)
 80010e6:	f001 fc55 	bl	8002994 <HAL_GPIO_ReadPin>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f040 8096 	bne.w	800121e <Mode+0x462>
 80010f2:	4b53      	ldr	r3, [pc, #332]	; (8001240 <Mode+0x484>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 8091 	beq.w	800121e <Mode+0x462>
 80010fc:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <Mode+0x474>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f083 0301 	eor.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 8089 	beq.w	800121e <Mode+0x462>
		{
			while (HAL_GPIO_ReadPin(GPIOA, Ok) == 0) {}
 800110c:	bf00      	nop
 800110e:	2140      	movs	r1, #64	; 0x40
 8001110:	4846      	ldr	r0, [pc, #280]	; (800122c <Mode+0x470>)
 8001112:	f001 fc3f 	bl	8002994 <HAL_GPIO_ReadPin>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f8      	beq.n	800110e <Mode+0x352>
			PressSound();
 800111c:	f7ff fe34 	bl	8000d88 <PressSound>
			ex = !ex;
 8001120:	4b43      	ldr	r3, [pc, #268]	; (8001230 <Mode+0x474>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf14      	ite	ne
 8001128:	2301      	movne	r3, #1
 800112a:	2300      	moveq	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <Mode+0x474>)
 800113c:	701a      	strb	r2, [r3, #0]
			LCD_Clear();
 800113e:	f7ff fda7 	bl	8000c90 <LCD_Clear>
			while (ex == 1)
 8001142:	e068      	b.n	8001216 <Mode+0x45a>
			{
				LCD_SetCursor(0, 0);
 8001144:	2100      	movs	r1, #0
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff fd6e 	bl	8000c28 <LCD_SetCursor>
				LCD_PrintInt(HumiSet);
 800114c:	4b3d      	ldr	r3, [pc, #244]	; (8001244 <Mode+0x488>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fda7 	bl	8000ca4 <LCD_PrintInt>
				LCD_SetCursor(1, 0);
 8001156:	2100      	movs	r1, #0
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff fd65 	bl	8000c28 <LCD_SetCursor>
				LCD_SendString("Press OK to setup !!");
 800115e:	4832      	ldr	r0, [pc, #200]	; (8001228 <Mode+0x46c>)
 8001160:	f7ff fd4c 	bl	8000bfc <LCD_SendString>
				if (HAL_GPIO_ReadPin(GPIOA, Ok) == 0)
 8001164:	2140      	movs	r1, #64	; 0x40
 8001166:	4831      	ldr	r0, [pc, #196]	; (800122c <Mode+0x470>)
 8001168:	f001 fc14 	bl	8002994 <HAL_GPIO_ReadPin>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d109      	bne.n	8001186 <Mode+0x3ca>
				{
					PressSound();
 8001172:	f7ff fe09 	bl	8000d88 <PressSound>
					LCD_Clear();
 8001176:	f7ff fd8b 	bl	8000c90 <LCD_Clear>
					ex = 0;
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <Mode+0x474>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
					menu = 0;
 8001180:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <Mode+0x478>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
				}
				if (HAL_GPIO_ReadPin(GPIOA, Tang) == 0)
 8001186:	2110      	movs	r1, #16
 8001188:	4828      	ldr	r0, [pc, #160]	; (800122c <Mode+0x470>)
 800118a:	f001 fc03 	bl	8002994 <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d11c      	bne.n	80011ce <Mode+0x412>
				{
					LCD_SetCursor(0,0);
 8001194:	2100      	movs	r1, #0
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff fd46 	bl	8000c28 <LCD_SetCursor>
					LCD_SendString("   ");
 800119c:	4826      	ldr	r0, [pc, #152]	; (8001238 <Mode+0x47c>)
 800119e:	f7ff fd2d 	bl	8000bfc <LCD_SendString>
					FlashErase(ADD_HUMI_DATA);
 80011a2:	4829      	ldr	r0, [pc, #164]	; (8001248 <Mode+0x48c>)
 80011a4:	f7ff fc14 	bl	80009d0 <FlashErase>
					HumiSet += 1;
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <Mode+0x488>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <Mode+0x488>)
 80011b2:	701a      	strb	r2, [r3, #0]
					if( HumiSet >= 70)
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <Mode+0x488>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b45      	cmp	r3, #69	; 0x45
 80011ba:	d902      	bls.n	80011c2 <Mode+0x406>
					{
						HumiSet = 20;
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <Mode+0x488>)
 80011be:	2214      	movs	r2, #20
 80011c0:	701a      	strb	r2, [r3, #0]
					}
					FlashWrite(HumiSet , ADD_HUMI_DATA);
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <Mode+0x488>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	4920      	ldr	r1, [pc, #128]	; (8001248 <Mode+0x48c>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fc1d 	bl	8000a08 <FlashWrite>
				}
				if (HAL_GPIO_ReadPin(GPIOA, Giam) == 0)
 80011ce:	2120      	movs	r1, #32
 80011d0:	4816      	ldr	r0, [pc, #88]	; (800122c <Mode+0x470>)
 80011d2:	f001 fbdf 	bl	8002994 <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d11c      	bne.n	8001216 <Mode+0x45a>
				{
					LCD_SetCursor(0,0);
 80011dc:	2100      	movs	r1, #0
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fd22 	bl	8000c28 <LCD_SetCursor>
					LCD_SendString("   ");
 80011e4:	4814      	ldr	r0, [pc, #80]	; (8001238 <Mode+0x47c>)
 80011e6:	f7ff fd09 	bl	8000bfc <LCD_SendString>
					FlashErase(ADD_HUMI_DATA);
 80011ea:	4817      	ldr	r0, [pc, #92]	; (8001248 <Mode+0x48c>)
 80011ec:	f7ff fbf0 	bl	80009d0 <FlashErase>
					HumiSet -= 1;
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <Mode+0x488>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <Mode+0x488>)
 80011fa:	701a      	strb	r2, [r3, #0]
					if (HumiSet <= 20)
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <Mode+0x488>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b14      	cmp	r3, #20
 8001202:	d802      	bhi.n	800120a <Mode+0x44e>
					{
						HumiSet = 70;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <Mode+0x488>)
 8001206:	2246      	movs	r2, #70	; 0x46
 8001208:	701a      	strb	r2, [r3, #0]
					}
					FlashWrite(HumiSet , ADD_HUMI_DATA);
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <Mode+0x488>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	490e      	ldr	r1, [pc, #56]	; (8001248 <Mode+0x48c>)
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fbf9 	bl	8000a08 <FlashWrite>
			while (ex == 1)
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <Mode+0x474>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d192      	bne.n	8001144 <Mode+0x388>
				}
			}
		}
	}
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000000 	.word	0x20000000
 8001228:	08004c78 	.word	0x08004c78
 800122c:	40010800 	.word	0x40010800
 8001230:	20000082 	.word	0x20000082
 8001234:	20000080 	.word	0x20000080
 8001238:	08004c90 	.word	0x08004c90
 800123c:	08010000 	.word	0x08010000
 8001240:	20000081 	.word	0x20000081
 8001244:	20000001 	.word	0x20000001
 8001248:	0800fc00 	.word	0x0800fc00

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001252:	f000 feb1 	bl	8001fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001256:	f000 f927 	bl	80014a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125a:	f000 fa65 	bl	8001728 <MX_GPIO_Init>
  MX_TIM4_Init();
 800125e:	f000 f9eb 	bl	8001638 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001262:	f000 fa37 	bl	80016d4 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001266:	f000 f963 	bl	8001530 <MX_SPI2_Init>
  MX_TIM3_Init();
 800126a:	f000 f997 	bl	800159c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 800126e:	f000 fbb5 	bl	80019dc <MFRC522_Init>
  LCD_Init();
 8001272:	f7ff fc41 	bl	8000af8 <LCD_Init>
  HAL_TIM_Base_Start(&htim4);
 8001276:	4879      	ldr	r0, [pc, #484]	; (800145c <main+0x210>)
 8001278:	f002 fb0e 	bl	8003898 <HAL_TIM_Base_Start>
  DHT_sensor MyRoom = { GPIOB, GPIO_PIN_4, DHT22, GPIO_NOPULL };
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	4b74      	ldr	r3, [pc, #464]	; (8001460 <main+0x214>)
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	2310      	movs	r3, #16
 8001292:	823b      	strh	r3, [r7, #16]
 8001294:	2301      	movs	r3, #1
 8001296:	74bb      	strb	r3, [r7, #18]
  HumiSet = FlashRead (ADD_HUMI_DATA) ;
 8001298:	4872      	ldr	r0, [pc, #456]	; (8001464 <main+0x218>)
 800129a:	f7ff fbcc 	bl	8000a36 <FlashRead>
 800129e:	4603      	mov	r3, r0
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b71      	ldr	r3, [pc, #452]	; (8001468 <main+0x21c>)
 80012a4:	701a      	strb	r2, [r3, #0]
  TempSet = FlashRead (ADD_TEMP_DATA) ;
 80012a6:	4871      	ldr	r0, [pc, #452]	; (800146c <main+0x220>)
 80012a8:	f7ff fbc5 	bl	8000a36 <FlashRead>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b6f      	ldr	r3, [pc, #444]	; (8001470 <main+0x224>)
 80012b2:	701a      	strb	r2, [r3, #0]
  __HAL_TIM_SET_COUNTER(&htim4 , 0);
 80012b4:	4b69      	ldr	r3, [pc, #420]	; (800145c <main+0x210>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2200      	movs	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_PWM_Start(&htim4 , TIM_CHANNEL_3);
 80012bc:	2108      	movs	r1, #8
 80012be:	4867      	ldr	r0, [pc, #412]	; (800145c <main+0x210>)
 80012c0:	f002 fb34 	bl	800392c <HAL_TIM_PWM_Start>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		d = DHT_getData(&MyRoom);
 80012c4:	4c6b      	ldr	r4, [pc, #428]	; (8001474 <main+0x228>)
 80012c6:	463b      	mov	r3, r7
 80012c8:	f107 020c 	add.w	r2, r7, #12
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f9dc 	bl	800068c <DHT_getData>
 80012d4:	4622      	mov	r2, r4
 80012d6:	463b      	mov	r3, r7
 80012d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012dc:	e882 0003 	stmia.w	r2, {r0, r1}

		NhietDo = (uint16_t) d.temp;
 80012e0:	4b64      	ldr	r3, [pc, #400]	; (8001474 <main+0x228>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f969 	bl	80005bc <__aeabi_f2uiz>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	4b62      	ldr	r3, [pc, #392]	; (8001478 <main+0x22c>)
 80012f0:	801a      	strh	r2, [r3, #0]
		DoAm = (uint16_t) d.hum;
 80012f2:	4b60      	ldr	r3, [pc, #384]	; (8001474 <main+0x228>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f960 	bl	80005bc <__aeabi_f2uiz>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b29a      	uxth	r2, r3
 8001300:	4b5e      	ldr	r3, [pc, #376]	; (800147c <main+0x230>)
 8001302:	801a      	strh	r2, [r3, #0]

		if (d.temp > TempSet || d.hum > HumiSet) {
 8001304:	4b5b      	ldr	r3, [pc, #364]	; (8001474 <main+0x228>)
 8001306:	685c      	ldr	r4, [r3, #4]
 8001308:	4b59      	ldr	r3, [pc, #356]	; (8001470 <main+0x224>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f88b 	bl	8000428 <__aeabi_i2f>
 8001312:	4603      	mov	r3, r0
 8001314:	4619      	mov	r1, r3
 8001316:	4620      	mov	r0, r4
 8001318:	f7ff f946 	bl	80005a8 <__aeabi_fcmpgt>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10e      	bne.n	8001340 <main+0xf4>
 8001322:	4b54      	ldr	r3, [pc, #336]	; (8001474 <main+0x228>)
 8001324:	681c      	ldr	r4, [r3, #0]
 8001326:	4b50      	ldr	r3, [pc, #320]	; (8001468 <main+0x21c>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f87c 	bl	8000428 <__aeabi_i2f>
 8001330:	4603      	mov	r3, r0
 8001332:	4619      	mov	r1, r3
 8001334:	4620      	mov	r0, r4
 8001336:	f7ff f937 	bl	80005a8 <__aeabi_fcmpgt>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <main+0xfa>
			Warning();
 8001340:	f7ff fd14 	bl	8000d6c <Warning>
 8001344:	e001      	b.n	800134a <main+0xfe>
		} else {
			Normal();
 8001346:	f7ff fd01 	bl	8000d4c <Normal>
		}
		Mode();
 800134a:	f7ff fd37 	bl	8000dbc <Mode>
		sprintf(buffer1 , "%d" ,(uint16_t) d.temp);
 800134e:	4b49      	ldr	r3, [pc, #292]	; (8001474 <main+0x228>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f932 	bl	80005bc <__aeabi_f2uiz>
 8001358:	4603      	mov	r3, r0
 800135a:	b29b      	uxth	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	4948      	ldr	r1, [pc, #288]	; (8001480 <main+0x234>)
 8001360:	4848      	ldr	r0, [pc, #288]	; (8001484 <main+0x238>)
 8001362:	f002 ff97 	bl	8004294 <siprintf>
		sprintf(buffer2 , "%d" ,(uint16_t) d.hum);
 8001366:	4b43      	ldr	r3, [pc, #268]	; (8001474 <main+0x228>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f926 	bl	80005bc <__aeabi_f2uiz>
 8001370:	4603      	mov	r3, r0
 8001372:	b29b      	uxth	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	4942      	ldr	r1, [pc, #264]	; (8001480 <main+0x234>)
 8001378:	4843      	ldr	r0, [pc, #268]	; (8001488 <main+0x23c>)
 800137a:	f002 ff8b 	bl	8004294 <siprintf>
		if(__HAL_TIM_GET_COUNTER(&htim4) > 1000)
 800137e:	4b37      	ldr	r3, [pc, #220]	; (800145c <main+0x210>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001388:	d90f      	bls.n	80013aa <main+0x15e>
		{
			HAL_UART_Transmit(&huart1 , (uint8_t *)buffer1 , 2,1);
 800138a:	2301      	movs	r3, #1
 800138c:	2202      	movs	r2, #2
 800138e:	493d      	ldr	r1, [pc, #244]	; (8001484 <main+0x238>)
 8001390:	483e      	ldr	r0, [pc, #248]	; (800148c <main+0x240>)
 8001392:	f002 fdff 	bl	8003f94 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1 , (uint8_t *)buffer2 , 2,1);
 8001396:	2301      	movs	r3, #1
 8001398:	2202      	movs	r2, #2
 800139a:	493b      	ldr	r1, [pc, #236]	; (8001488 <main+0x23c>)
 800139c:	483b      	ldr	r0, [pc, #236]	; (800148c <main+0x240>)
 800139e:	f002 fdf9 	bl	8003f94 <HAL_UART_Transmit>
			__HAL_TIM_SET_COUNTER(&htim4 , 0);
 80013a2:	4b2e      	ldr	r3, [pc, #184]	; (800145c <main+0x210>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
		}
		status = MFRC522_Request(PICC_REQIDL, str);
 80013aa:	4939      	ldr	r1, [pc, #228]	; (8001490 <main+0x244>)
 80013ac:	2026      	movs	r0, #38	; 0x26
 80013ae:	f000 fc0c 	bl	8001bca <MFRC522_Request>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b37      	ldr	r3, [pc, #220]	; (8001494 <main+0x248>)
 80013b8:	701a      	strb	r2, [r3, #0]
		status = MFRC522_Anticoll(str);
 80013ba:	4835      	ldr	r0, [pc, #212]	; (8001490 <main+0x244>)
 80013bc:	f000 fc2a 	bl	8001c14 <MFRC522_Anticoll>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b33      	ldr	r3, [pc, #204]	; (8001494 <main+0x248>)
 80013c6:	701a      	strb	r2, [r3, #0]
		memcpy(sNum, str, 5);
 80013c8:	4b33      	ldr	r3, [pc, #204]	; (8001498 <main+0x24c>)
 80013ca:	4a31      	ldr	r2, [pc, #196]	; (8001490 <main+0x244>)
 80013cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d0:	6018      	str	r0, [r3, #0]
 80013d2:	3304      	adds	r3, #4
 80013d4:	7019      	strb	r1, [r3, #0]
		if((sNum[0]==115) && (sNum[1]==238) && (sNum[2]==40) && (sNum[3]==168) && (sNum[4]==29) )
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <main+0x24c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b73      	cmp	r3, #115	; 0x73
 80013dc:	d128      	bne.n	8001430 <main+0x1e4>
 80013de:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <main+0x24c>)
 80013e0:	785b      	ldrb	r3, [r3, #1]
 80013e2:	2bee      	cmp	r3, #238	; 0xee
 80013e4:	d124      	bne.n	8001430 <main+0x1e4>
 80013e6:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <main+0x24c>)
 80013e8:	789b      	ldrb	r3, [r3, #2]
 80013ea:	2b28      	cmp	r3, #40	; 0x28
 80013ec:	d120      	bne.n	8001430 <main+0x1e4>
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <main+0x24c>)
 80013f0:	78db      	ldrb	r3, [r3, #3]
 80013f2:	2ba8      	cmp	r3, #168	; 0xa8
 80013f4:	d11c      	bne.n	8001430 <main+0x1e4>
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <main+0x24c>)
 80013f8:	791b      	ldrb	r3, [r3, #4]
 80013fa:	2b1d      	cmp	r3, #29
 80013fc:	d118      	bne.n	8001430 <main+0x1e4>
		{

			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,1);
 80013fe:	2201      	movs	r2, #1
 8001400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <main+0x214>)
 8001406:	f001 fadc 	bl	80029c2 <HAL_GPIO_WritePin>
			   LCD_SetCursor(2, 0);
 800140a:	2100      	movs	r1, #0
 800140c:	2002      	movs	r0, #2
 800140e:	f7ff fc0b 	bl	8000c28 <LCD_SetCursor>
			   LCD_SendString("         ");
 8001412:	4822      	ldr	r0, [pc, #136]	; (800149c <main+0x250>)
 8001414:	f7ff fbf2 	bl	8000bfc <LCD_SendString>
			   LCD_SetCursor(2, 0);
 8001418:	2100      	movs	r1, #0
 800141a:	2002      	movs	r0, #2
 800141c:	f7ff fc04 	bl	8000c28 <LCD_SetCursor>
			   LCD_SendString("CUA MO");
 8001420:	481f      	ldr	r0, [pc, #124]	; (80014a0 <main+0x254>)
 8001422:	f7ff fbeb 	bl	8000bfc <LCD_SendString>
			   HAL_Delay(1000);
 8001426:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800142a:	f000 fe27 	bl	800207c <HAL_Delay>
 800142e:	e013      	b.n	8001458 <main+0x20c>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,0);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001436:	480a      	ldr	r0, [pc, #40]	; (8001460 <main+0x214>)
 8001438:	f001 fac3 	bl	80029c2 <HAL_GPIO_WritePin>
			LCD_SetCursor(2,0);
 800143c:	2100      	movs	r1, #0
 800143e:	2002      	movs	r0, #2
 8001440:	f7ff fbf2 	bl	8000c28 <LCD_SetCursor>
			LCD_SendString("         ");
 8001444:	4815      	ldr	r0, [pc, #84]	; (800149c <main+0x250>)
 8001446:	f7ff fbd9 	bl	8000bfc <LCD_SendString>
			LCD_SetCursor(2, 0);
 800144a:	2100      	movs	r1, #0
 800144c:	2002      	movs	r0, #2
 800144e:	f7ff fbeb 	bl	8000c28 <LCD_SetCursor>
			LCD_SendString("CUA DONG");
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <main+0x258>)
 8001454:	f7ff fbd2 	bl	8000bfc <LCD_SendString>
		d = DHT_getData(&MyRoom);
 8001458:	e734      	b.n	80012c4 <main+0x78>
 800145a:	bf00      	nop
 800145c:	20000134 	.word	0x20000134
 8001460:	40010c00 	.word	0x40010c00
 8001464:	0800fc00 	.word	0x0800fc00
 8001468:	20000001 	.word	0x20000001
 800146c:	08010000 	.word	0x08010000
 8001470:	20000000 	.word	0x20000000
 8001474:	2000008c 	.word	0x2000008c
 8001478:	2000007c 	.word	0x2000007c
 800147c:	2000007e 	.word	0x2000007e
 8001480:	08004c94 	.word	0x08004c94
 8001484:	20000084 	.word	0x20000084
 8001488:	20000088 	.word	0x20000088
 800148c:	2000017c 	.word	0x2000017c
 8001490:	200001c8 	.word	0x200001c8
 8001494:	200001c4 	.word	0x200001c4
 8001498:	200001d8 	.word	0x200001d8
 800149c:	08004c98 	.word	0x08004c98
 80014a0:	08004ca4 	.word	0x08004ca4
 80014a4:	08004cac 	.word	0x08004cac

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b090      	sub	sp, #64	; 0x40
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	2228      	movs	r2, #40	; 0x28
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 ff0c 	bl	80042d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ca:	2301      	movs	r3, #1
 80014cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d8:	2301      	movs	r3, #1
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014dc:	2302      	movs	r3, #2
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80014e6:	2300      	movs	r3, #0
 80014e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ea:	f107 0318 	add.w	r3, r7, #24
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fa98 	bl	8002a24 <HAL_RCC_OscConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0x56>
  {
    Error_Handler();
 80014fa:	f000 f9b3 	bl	8001864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fe:	230f      	movs	r3, #15
 8001500:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001502:	2302      	movs	r3, #2
 8001504:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800150a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800150e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f001 fd05 	bl	8002f28 <HAL_RCC_ClockConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001524:	f000 f99e 	bl	8001864 <Error_Handler>
  }
}
 8001528:	bf00      	nop
 800152a:	3740      	adds	r7, #64	; 0x40
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <MX_SPI2_Init+0x64>)
 8001536:	4a18      	ldr	r2, [pc, #96]	; (8001598 <MX_SPI2_Init+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <MX_SPI2_Init+0x64>)
 800153c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001540:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001542:	4b14      	ldr	r3, [pc, #80]	; (8001594 <MX_SPI2_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_SPI2_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_SPI2_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_SPI2_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_SPI2_Init+0x64>)
 800155c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001560:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_SPI2_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <MX_SPI2_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_SPI2_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MX_SPI2_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_SPI2_Init+0x64>)
 800157c:	220a      	movs	r2, #10
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_SPI2_Init+0x64>)
 8001582:	f001 fe5f 	bl	8003244 <HAL_SPI_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800158c:	f000 f96a 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000094 	.word	0x20000094
 8001598:	40003800 	.word	0x40003800

0800159c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b0:	463b      	mov	r3, r7
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <MX_TIM3_Init+0x94>)
 80015ba:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <MX_TIM3_Init+0x98>)
 80015bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000;
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_TIM3_Init+0x94>)
 80015c0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80015c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_TIM3_Init+0x94>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <MX_TIM3_Init+0x94>)
 80015ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_TIM3_Init+0x94>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <MX_TIM3_Init+0x94>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015e0:	4813      	ldr	r0, [pc, #76]	; (8001630 <MX_TIM3_Init+0x94>)
 80015e2:	f002 f909 	bl	80037f8 <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80015ec:	f000 f93a 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	4619      	mov	r1, r3
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <MX_TIM3_Init+0x94>)
 80015fe:	f002 fa37 	bl	8003a70 <HAL_TIM_ConfigClockSource>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001608:	f000 f92c 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_TIM3_Init+0x94>)
 800161a:	f002 fc0d 	bl	8003e38 <HAL_TIMEx_MasterConfigSynchronization>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001624:	f000 f91e 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200000ec 	.word	0x200000ec
 8001634:	40000400 	.word	0x40000400

08001638 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164c:	463b      	mov	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <MX_TIM4_Init+0x94>)
 8001656:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <MX_TIM4_Init+0x98>)
 8001658:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <MX_TIM4_Init+0x94>)
 800165c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001660:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_TIM4_Init+0x94>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <MX_TIM4_Init+0x94>)
 800166a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800166e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <MX_TIM4_Init+0x94>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <MX_TIM4_Init+0x94>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800167c:	4813      	ldr	r0, [pc, #76]	; (80016cc <MX_TIM4_Init+0x94>)
 800167e:	f002 f8bb 	bl	80037f8 <HAL_TIM_Base_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001688:	f000 f8ec 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001690:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	4619      	mov	r1, r3
 8001698:	480c      	ldr	r0, [pc, #48]	; (80016cc <MX_TIM4_Init+0x94>)
 800169a:	f002 f9e9 	bl	8003a70 <HAL_TIM_ConfigClockSource>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80016a4:	f000 f8de 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016b0:	463b      	mov	r3, r7
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_TIM4_Init+0x94>)
 80016b6:	f002 fbbf 	bl	8003e38 <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80016c0:	f000 f8d0 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000134 	.word	0x20000134
 80016d0:	40000800 	.word	0x40000800

080016d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_USART1_UART_Init+0x4c>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <MX_USART1_UART_Init+0x50>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_USART1_UART_Init+0x4c>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_USART1_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_USART1_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_USART1_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_USART1_UART_Init+0x4c>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_USART1_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_USART1_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_USART1_UART_Init+0x4c>)
 800170c:	f002 fbf2 	bl	8003ef4 <HAL_UART_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001716:	f000 f8a5 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000017c 	.word	0x2000017c
 8001724:	40013800 	.word	0x40013800

08001728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173c:	4b45      	ldr	r3, [pc, #276]	; (8001854 <MX_GPIO_Init+0x12c>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a44      	ldr	r2, [pc, #272]	; (8001854 <MX_GPIO_Init+0x12c>)
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b42      	ldr	r3, [pc, #264]	; (8001854 <MX_GPIO_Init+0x12c>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001754:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <MX_GPIO_Init+0x12c>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a3e      	ldr	r2, [pc, #248]	; (8001854 <MX_GPIO_Init+0x12c>)
 800175a:	f043 0320 	orr.w	r3, r3, #32
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b3c      	ldr	r3, [pc, #240]	; (8001854 <MX_GPIO_Init+0x12c>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b39      	ldr	r3, [pc, #228]	; (8001854 <MX_GPIO_Init+0x12c>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a38      	ldr	r2, [pc, #224]	; (8001854 <MX_GPIO_Init+0x12c>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b36      	ldr	r3, [pc, #216]	; (8001854 <MX_GPIO_Init+0x12c>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001784:	4b33      	ldr	r3, [pc, #204]	; (8001854 <MX_GPIO_Init+0x12c>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a32      	ldr	r2, [pc, #200]	; (8001854 <MX_GPIO_Init+0x12c>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b30      	ldr	r3, [pc, #192]	; (8001854 <MX_GPIO_Init+0x12c>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a2:	482d      	ldr	r0, [pc, #180]	; (8001858 <MX_GPIO_Init+0x130>)
 80017a4:	f001 f90d 	bl	80029c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9
 80017a8:	2200      	movs	r2, #0
 80017aa:	f641 7106 	movw	r1, #7942	; 0x1f06
 80017ae:	482b      	ldr	r0, [pc, #172]	; (800185c <MX_GPIO_Init+0x134>)
 80017b0:	f001 f907 	bl	80029c2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_12
 80017b4:	2200      	movs	r2, #0
 80017b6:	f241 5113 	movw	r1, #5395	; 0x1513
 80017ba:	4829      	ldr	r0, [pc, #164]	; (8001860 <MX_GPIO_Init+0x138>)
 80017bc:	f001 f901 	bl	80029c2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4619      	mov	r1, r3
 80017d8:	481f      	ldr	r0, [pc, #124]	; (8001858 <MX_GPIO_Init+0x130>)
 80017da:	f000 ff57 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA8 PA9
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9
 80017de:	f641 7306 	movw	r3, #7942	; 0x1f06
 80017e2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4619      	mov	r1, r3
 80017f6:	4819      	ldr	r0, [pc, #100]	; (800185c <MX_GPIO_Init+0x134>)
 80017f8:	f000 ff48 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80017fc:	2348      	movs	r3, #72	; 0x48
 80017fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001804:	2301      	movs	r3, #1
 8001806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	4813      	ldr	r0, [pc, #76]	; (800185c <MX_GPIO_Init+0x134>)
 8001810:	f000 ff3c 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001814:	2330      	movs	r3, #48	; 0x30
 8001816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	4619      	mov	r1, r3
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <MX_GPIO_Init+0x134>)
 8001828:	f000 ff30 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB12
                           PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_12
 800182c:	f241 5313 	movw	r3, #5395	; 0x1513
 8001830:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2302      	movs	r3, #2
 800183c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	4619      	mov	r1, r3
 8001844:	4806      	ldr	r0, [pc, #24]	; (8001860 <MX_GPIO_Init+0x138>)
 8001846:	f000 ff21 	bl	800268c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800184a:	bf00      	nop
 800184c:	3720      	adds	r7, #32
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	40011000 	.word	0x40011000
 800185c:	40010800 	.word	0x40010800
 8001860:	40010c00 	.word	0x40010c00

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800186c:	e7fe      	b.n	800186c <Error_Handler+0x8>
	...

08001870 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af02      	add	r7, sp, #8
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800187a:	f107 020f 	add.w	r2, r7, #15
 800187e:	1df9      	adds	r1, r7, #7
 8001880:	2364      	movs	r3, #100	; 0x64
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2301      	movs	r3, #1
 8001886:	4804      	ldr	r0, [pc, #16]	; (8001898 <RC522_SPI_Transfer+0x28>)
 8001888:	f001 fd60 	bl	800334c <HAL_SPI_TransmitReceive>

	return rx_data;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000094 	.word	0x20000094

0800189c <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	460a      	mov	r2, r1
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	4613      	mov	r3, r2
 80018aa:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b2:	480d      	ldr	r0, [pc, #52]	; (80018e8 <Write_MFRC522+0x4c>)
 80018b4:	f001 f885 	bl	80029c2 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ffd3 	bl	8001870 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80018ca:	79bb      	ldrb	r3, [r7, #6]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ffcf 	bl	8001870 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80018d2:	2201      	movs	r2, #1
 80018d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <Write_MFRC522+0x4c>)
 80018da:	f001 f872 	bl	80029c2 <HAL_GPIO_WritePin>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40010c00 	.word	0x40010c00

080018ec <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fc:	480f      	ldr	r0, [pc, #60]	; (800193c <Read_MFRC522+0x50>)
 80018fe:	f001 f860 	bl	80029c2 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	b25b      	sxtb	r3, r3
 8001908:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800190c:	b25b      	sxtb	r3, r3
 800190e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001912:	b25b      	sxtb	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ffaa 	bl	8001870 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff ffa7 	bl	8001870 <RC522_SPI_Transfer>
 8001922:	4603      	mov	r3, r0
 8001924:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800192c:	4803      	ldr	r0, [pc, #12]	; (800193c <Read_MFRC522+0x50>)
 800192e:	f001 f848 	bl	80029c2 <HAL_GPIO_WritePin>

	return val;
 8001932:	7bfb      	ldrb	r3, [r7, #15]

}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40010c00 	.word	0x40010c00

08001940 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	460a      	mov	r2, r1
 800194a:	71fb      	strb	r3, [r7, #7]
 800194c:	4613      	mov	r3, r2
 800194e:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ffca 	bl	80018ec <Read_MFRC522>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	79bb      	ldrb	r3, [r7, #6]
 8001960:	4313      	orrs	r3, r2
 8001962:	b2da      	uxtb	r2, r3
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff97 	bl	800189c <Write_MFRC522>
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	460a      	mov	r2, r1
 8001980:	71fb      	strb	r3, [r7, #7]
 8001982:	4613      	mov	r3, r2
 8001984:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ffaf 	bl	80018ec <Read_MFRC522>
 800198e:	4603      	mov	r3, r0
 8001990:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001992:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001996:	43db      	mvns	r3, r3
 8001998:	b25a      	sxtb	r2, r3
 800199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199e:	4013      	ands	r3, r2
 80019a0:	b25b      	sxtb	r3, r3
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff77 	bl	800189c <Write_MFRC522>
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 80019ba:	2014      	movs	r0, #20
 80019bc:	f7ff ff96 	bl	80018ec <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 80019c0:	2103      	movs	r1, #3
 80019c2:	2014      	movs	r0, #20
 80019c4:	f7ff ffbc 	bl	8001940 <SetBitMask>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80019d0:	210f      	movs	r1, #15
 80019d2:	2001      	movs	r0, #1
 80019d4:	f7ff ff62 	bl	800189c <Write_MFRC522>
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e6:	4813      	ldr	r0, [pc, #76]	; (8001a34 <MFRC522_Init+0x58>)
 80019e8:	f000 ffeb 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	2102      	movs	r1, #2
 80019f0:	4810      	ldr	r0, [pc, #64]	; (8001a34 <MFRC522_Init+0x58>)
 80019f2:	f000 ffe6 	bl	80029c2 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80019f6:	f7ff ffe9 	bl	80019cc <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80019fa:	218d      	movs	r1, #141	; 0x8d
 80019fc:	202a      	movs	r0, #42	; 0x2a
 80019fe:	f7ff ff4d 	bl	800189c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8001a02:	213e      	movs	r1, #62	; 0x3e
 8001a04:	202b      	movs	r0, #43	; 0x2b
 8001a06:	f7ff ff49 	bl	800189c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8001a0a:	211e      	movs	r1, #30
 8001a0c:	202d      	movs	r0, #45	; 0x2d
 8001a0e:	f7ff ff45 	bl	800189c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8001a12:	2100      	movs	r1, #0
 8001a14:	202c      	movs	r0, #44	; 0x2c
 8001a16:	f7ff ff41 	bl	800189c <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8001a1a:	2140      	movs	r1, #64	; 0x40
 8001a1c:	2015      	movs	r0, #21
 8001a1e:	f7ff ff3d 	bl	800189c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8001a22:	213d      	movs	r1, #61	; 0x3d
 8001a24:	2011      	movs	r0, #17
 8001a26:	f7ff ff39 	bl	800189c <Write_MFRC522>

	AntennaOn();
 8001a2a:	f7ff ffc4 	bl	80019b6 <AntennaOn>
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40010c00 	.word	0x40010c00

08001a38 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	4603      	mov	r3, r0
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	4613      	mov	r3, r2
 8001a48:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8001a52:	2300      	movs	r3, #0
 8001a54:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	2b0c      	cmp	r3, #12
 8001a5a:	d006      	beq.n	8001a6a <MFRC522_ToCard+0x32>
 8001a5c:	2b0e      	cmp	r3, #14
 8001a5e:	d109      	bne.n	8001a74 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001a60:	2312      	movs	r3, #18
 8001a62:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001a64:	2310      	movs	r3, #16
 8001a66:	777b      	strb	r3, [r7, #29]
			break;
 8001a68:	e005      	b.n	8001a76 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8001a6a:	2377      	movs	r3, #119	; 0x77
 8001a6c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8001a6e:	2330      	movs	r3, #48	; 0x30
 8001a70:	777b      	strb	r3, [r7, #29]
			break;
 8001a72:	e000      	b.n	8001a76 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001a74:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8001a76:	7fbb      	ldrb	r3, [r7, #30]
 8001a78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	2002      	movs	r0, #2
 8001a82:	f7ff ff0b 	bl	800189c <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	2004      	movs	r0, #4
 8001a8a:	f7ff ff74 	bl	8001976 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	200a      	movs	r0, #10
 8001a92:	f7ff ff55 	bl	8001940 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8001a96:	2100      	movs	r1, #0
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff feff 	bl	800189c <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	e00a      	b.n	8001aba <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	2009      	movs	r0, #9
 8001ab0:	f7ff fef4 	bl	800189c <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	7bbb      	ldrb	r3, [r7, #14]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d3f0      	bcc.n	8001aa4 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f7ff fee8 	bl	800189c <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	2b0c      	cmp	r3, #12
 8001ad0:	d103      	bne.n	8001ada <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	200d      	movs	r0, #13
 8001ad6:	f7ff ff33 	bl	8001940 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001ada:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ade:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8001ae0:	2004      	movs	r0, #4
 8001ae2:	f7ff ff03 	bl	80018ec <Read_MFRC522>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	773b      	strb	r3, [r7, #28]
        i--;
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00a      	beq.n	8001b0c <MFRC522_ToCard+0xd4>
 8001af6:	7f3b      	ldrb	r3, [r7, #28]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <MFRC522_ToCard+0xd4>
 8001b00:	7f3a      	ldrb	r2, [r7, #28]
 8001b02:	7f7b      	ldrb	r3, [r7, #29]
 8001b04:	4013      	ands	r3, r2
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0e9      	beq.n	8001ae0 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	200d      	movs	r0, #13
 8001b10:	f7ff ff31 	bl	8001976 <ClearBitMask>

    if (i != 0)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d052      	beq.n	8001bc0 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8001b1a:	2006      	movs	r0, #6
 8001b1c:	f7ff fee6 	bl	80018ec <Read_MFRC522>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 031b 	and.w	r3, r3, #27
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d148      	bne.n	8001bbc <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8001b2e:	7f3a      	ldrb	r2, [r7, #28]
 8001b30:	7fbb      	ldrb	r3, [r7, #30]
 8001b32:	4013      	ands	r3, r2
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	2b0c      	cmp	r3, #12
 8001b46:	d13b      	bne.n	8001bc0 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001b48:	200a      	movs	r0, #10
 8001b4a:	f7ff fecf 	bl	80018ec <Read_MFRC522>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001b52:	200c      	movs	r0, #12
 8001b54:	f7ff feca 	bl	80018ec <Read_MFRC522>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d008      	beq.n	8001b78 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8001b66:	7f3b      	ldrb	r3, [r7, #28]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	00da      	lsls	r2, r3, #3
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	4413      	add	r3, r2
 8001b70:	461a      	mov	r2, r3
 8001b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	e004      	b.n	8001b82 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8001b78:	7f3b      	ldrb	r3, [r7, #28]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b80:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8001b82:	7f3b      	ldrb	r3, [r7, #28]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <MFRC522_ToCard+0x154>
                {
					n = 1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8001b8c:	7f3b      	ldrb	r3, [r7, #28]
 8001b8e:	2b10      	cmp	r3, #16
 8001b90:	d901      	bls.n	8001b96 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8001b92:	2310      	movs	r3, #16
 8001b94:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	e00a      	b.n	8001bb2 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	18d4      	adds	r4, r2, r3
 8001ba2:	2009      	movs	r0, #9
 8001ba4:	f7ff fea2 	bl	80018ec <Read_MFRC522>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	61bb      	str	r3, [r7, #24]
 8001bb2:	7f3b      	ldrb	r3, [r7, #28]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d3f0      	bcc.n	8001b9c <MFRC522_ToCard+0x164>
 8001bba:	e001      	b.n	8001bc0 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8001bc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}

08001bca <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af02      	add	r7, sp, #8
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	6039      	str	r1, [r7, #0]
 8001bd4:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8001bd6:	2107      	movs	r1, #7
 8001bd8:	200d      	movs	r0, #13
 8001bda:	f7ff fe5f 	bl	800189c <Write_MFRC522>

	TagType[0] = reqMode;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	79fa      	ldrb	r2, [r7, #7]
 8001be2:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	6839      	ldr	r1, [r7, #0]
 8001bf0:	200c      	movs	r0, #12
 8001bf2:	f7ff ff21 	bl	8001a38 <MFRC522_ToCard>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <MFRC522_Request+0x3c>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b10      	cmp	r3, #16
 8001c04:	d001      	beq.n	8001c0a <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8001c06:	2302      	movs	r3, #2
 8001c08:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001c20:	2100      	movs	r1, #0
 8001c22:	200d      	movs	r0, #13
 8001c24:	f7ff fe3a 	bl	800189c <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2293      	movs	r2, #147	; 0x93
 8001c2c:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3301      	adds	r3, #1
 8001c32:	2220      	movs	r2, #32
 8001c34:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	200c      	movs	r0, #12
 8001c44:	f7ff fef8 	bl	8001a38 <MFRC522_ToCard>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	73bb      	strb	r3, [r7, #14]
 8001c56:	e009      	b.n	8001c6c <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8001c58:	7bbb      	ldrb	r3, [r7, #14]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	7b7b      	ldrb	r3, [r7, #13]
 8001c62:	4053      	eors	r3, r2
 8001c64:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8001c66:	7bbb      	ldrb	r3, [r7, #14]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	73bb      	strb	r3, [r7, #14]
 8001c6c:	7bbb      	ldrb	r3, [r7, #14]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d9f2      	bls.n	8001c58 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8001c72:	7bbb      	ldrb	r3, [r7, #14]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	7b7a      	ldrb	r2, [r7, #13]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8001c80:	2302      	movs	r3, #2
 8001c82:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_MspInit+0x5c>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_MspInit+0x5c>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6193      	str	r3, [r2, #24]
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_MspInit+0x5c>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_MspInit+0x5c>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <HAL_MspInit+0x5c>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_MspInit+0x5c>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_MspInit+0x60>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <HAL_MspInit+0x60>)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010000 	.word	0x40010000

08001cf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1c      	ldr	r2, [pc, #112]	; (8001d80 <HAL_SPI_MspInit+0x8c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d131      	bne.n	8001d78 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d14:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_SPI_MspInit+0x90>)
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	4a1a      	ldr	r2, [pc, #104]	; (8001d84 <HAL_SPI_MspInit+0x90>)
 8001d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1e:	61d3      	str	r3, [r2, #28]
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_SPI_MspInit+0x90>)
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_SPI_MspInit+0x90>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <HAL_SPI_MspInit+0x90>)
 8001d32:	f043 0308 	orr.w	r3, r3, #8
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_SPI_MspInit+0x90>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001d44:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001d48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	4619      	mov	r1, r3
 8001d58:	480b      	ldr	r0, [pc, #44]	; (8001d88 <HAL_SPI_MspInit+0x94>)
 8001d5a:	f000 fc97 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4619      	mov	r1, r3
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <HAL_SPI_MspInit+0x94>)
 8001d74:	f000 fc8a 	bl	800268c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40003800 	.word	0x40003800
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010c00 	.word	0x40010c00

08001d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <HAL_TIM_Base_MspInit+0x58>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10c      	bne.n	8001db8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_TIM_Base_MspInit+0x5c>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HAL_TIM_Base_MspInit+0x5c>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	61d3      	str	r3, [r2, #28]
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_TIM_Base_MspInit+0x5c>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001db6:	e010      	b.n	8001dda <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <HAL_TIM_Base_MspInit+0x60>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d10b      	bne.n	8001dda <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_TIM_Base_MspInit+0x5c>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_TIM_Base_MspInit+0x5c>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_TIM_Base_MspInit+0x5c>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	40000400 	.word	0x40000400
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40000800 	.word	0x40000800

08001df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a22      	ldr	r2, [pc, #136]	; (8001e94 <HAL_UART_MspInit+0xa4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d13d      	bne.n	8001e8c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e10:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <HAL_UART_MspInit+0xa8>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a20      	ldr	r2, [pc, #128]	; (8001e98 <HAL_UART_MspInit+0xa8>)
 8001e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <HAL_UART_MspInit+0xa8>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_UART_MspInit+0xa8>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a1a      	ldr	r2, [pc, #104]	; (8001e98 <HAL_UART_MspInit+0xa8>)
 8001e2e:	f043 0308 	orr.w	r3, r3, #8
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <HAL_UART_MspInit+0xa8>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e40:	2340      	movs	r3, #64	; 0x40
 8001e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	4812      	ldr	r0, [pc, #72]	; (8001e9c <HAL_UART_MspInit+0xac>)
 8001e54:	f000 fc1a 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480c      	ldr	r0, [pc, #48]	; (8001e9c <HAL_UART_MspInit+0xac>)
 8001e6c:	f000 fc0e 	bl	800268c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_UART_MspInit+0xb0>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
 8001e86:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <HAL_UART_MspInit+0xb0>)
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3728      	adds	r7, #40	; 0x28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40013800 	.word	0x40013800
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010c00 	.word	0x40010c00
 8001ea0:	40010000 	.word	0x40010000

08001ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <NMI_Handler+0x4>

08001eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <BusFault_Handler+0x4>

08001ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <UsageFault_Handler+0x4>

08001ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr

08001ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eea:	f000 f8ab 	bl	8002044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001efc:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <_sbrk+0x5c>)
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <_sbrk+0x60>)
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <_sbrk+0x64>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <_sbrk+0x68>)
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d207      	bcs.n	8001f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f24:	f002 f9de 	bl	80042e4 <__errno>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e009      	b.n	8001f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <_sbrk+0x64>)
 8001f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20005000 	.word	0x20005000
 8001f54:	00000400 	.word	0x00000400
 8001f58:	200001e0 	.word	0x200001e0
 8001f5c:	20000350 	.word	0x20000350

08001f60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8001f6c:	f7ff fff8 	bl	8001f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f70:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f72:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f74:	4a0c      	ldr	r2, [pc, #48]	; (8001fa8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f78:	e002      	b.n	8001f80 <LoopCopyDataInit>

08001f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7e:	3304      	adds	r3, #4

08001f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f84:	d3f9      	bcc.n	8001f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f88:	4c09      	ldr	r4, [pc, #36]	; (8001fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f8c:	e001      	b.n	8001f92 <LoopFillZerobss>

08001f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f90:	3204      	adds	r2, #4

08001f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f94:	d3fb      	bcc.n	8001f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f96:	f002 f9ab 	bl	80042f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f9a:	f7ff f957 	bl	800124c <main>
  bx lr
 8001f9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001fa8:	08004d20 	.word	0x08004d20
  ldr r2, =_sbss
 8001fac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001fb0:	20000350 	.word	0x20000350

08001fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fb4:	e7fe      	b.n	8001fb4 <ADC1_2_IRQHandler>
	...

08001fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_Init+0x28>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <HAL_Init+0x28>)
 8001fc2:	f043 0310 	orr.w	r3, r3, #16
 8001fc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f000 f92b 	bl	8002224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fce:	200f      	movs	r0, #15
 8001fd0:	f000 f808 	bl	8001fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd4:	f7ff fe5c 	bl	8001c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40022000 	.word	0x40022000

08001fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_InitTick+0x54>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_InitTick+0x58>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f935 	bl	8002272 <HAL_SYSTICK_Config>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e00e      	b.n	8002030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b0f      	cmp	r3, #15
 8002016:	d80a      	bhi.n	800202e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002018:	2200      	movs	r2, #0
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f000 f90b 	bl	800223a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002024:	4a06      	ldr	r2, [pc, #24]	; (8002040 <HAL_InitTick+0x5c>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e000      	b.n	8002030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000004 	.word	0x20000004
 800203c:	2000000c 	.word	0x2000000c
 8002040:	20000008 	.word	0x20000008

08002044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <HAL_IncTick+0x1c>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	4b05      	ldr	r3, [pc, #20]	; (8002064 <HAL_IncTick+0x20>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4413      	add	r3, r2
 8002054:	4a03      	ldr	r2, [pc, #12]	; (8002064 <HAL_IncTick+0x20>)
 8002056:	6013      	str	r3, [r2, #0]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	2000000c 	.word	0x2000000c
 8002064:	200001e4 	.word	0x200001e4

08002068 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b02      	ldr	r3, [pc, #8]	; (8002078 <HAL_GetTick+0x10>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	200001e4 	.word	0x200001e4

0800207c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff fff0 	bl	8002068 <HAL_GetTick>
 8002088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d005      	beq.n	80020a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_Delay+0x44>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a2:	bf00      	nop
 80020a4:	f7ff ffe0 	bl	8002068 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d8f7      	bhi.n	80020a4 <HAL_Delay+0x28>
  {
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2000000c 	.word	0x2000000c

080020c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f6:	4a04      	ldr	r2, [pc, #16]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f1c3 0307 	rsb	r3, r3, #7
 8002196:	2b04      	cmp	r3, #4
 8002198:	bf28      	it	cs
 800219a:	2304      	movcs	r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d902      	bls.n	80021ac <NVIC_EncodePriority+0x30>
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3b03      	subs	r3, #3
 80021aa:	e000      	b.n	80021ae <NVIC_EncodePriority+0x32>
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	f04f 32ff 	mov.w	r2, #4294967295
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	4313      	orrs	r3, r2
         );
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f0:	d301      	bcc.n	80021f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00f      	b.n	8002216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <SysTick_Config+0x40>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fe:	210f      	movs	r1, #15
 8002200:	f04f 30ff 	mov.w	r0, #4294967295
 8002204:	f7ff ff90 	bl	8002128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <SysTick_Config+0x40>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220e:	4b04      	ldr	r3, [pc, #16]	; (8002220 <SysTick_Config+0x40>)
 8002210:	2207      	movs	r2, #7
 8002212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	e000e010 	.word	0xe000e010

08002224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ff49 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800224c:	f7ff ff5e 	bl	800210c <__NVIC_GetPriorityGrouping>
 8002250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	6978      	ldr	r0, [r7, #20]
 8002258:	f7ff ff90 	bl	800217c <NVIC_EncodePriority>
 800225c:	4602      	mov	r2, r0
 800225e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff5f 	bl	8002128 <__NVIC_SetPriority>
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ffb0 	bl	80021e0 <SysTick_Config>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800228c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022a6:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_FLASH_Program+0xd8>)
 80022a8:	7e1b      	ldrb	r3, [r3, #24]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_FLASH_Program+0x26>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e054      	b.n	800235c <HAL_FLASH_Program+0xd0>
 80022b2:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <HAL_FLASH_Program+0xd8>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80022b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022bc:	f000 f8a8 	bl	8002410 <FLASH_WaitForLastOperation>
 80022c0:	4603      	mov	r3, r0
 80022c2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80022c4:	7dfb      	ldrb	r3, [r7, #23]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d144      	bne.n	8002354 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d102      	bne.n	80022d6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80022d0:	2301      	movs	r3, #1
 80022d2:	757b      	strb	r3, [r7, #21]
 80022d4:	e007      	b.n	80022e6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d102      	bne.n	80022e2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80022dc:	2302      	movs	r3, #2
 80022de:	757b      	strb	r3, [r7, #21]
 80022e0:	e001      	b.n	80022e6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80022e2:	2304      	movs	r3, #4
 80022e4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	75bb      	strb	r3, [r7, #22]
 80022ea:	e02d      	b.n	8002348 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80022ec:	7dbb      	ldrb	r3, [r7, #22]
 80022ee:	005a      	lsls	r2, r3, #1
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	eb02 0c03 	add.w	ip, r2, r3
 80022f6:	7dbb      	ldrb	r3, [r7, #22]
 80022f8:	0119      	lsls	r1, r3, #4
 80022fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022fe:	f1c1 0620 	rsb	r6, r1, #32
 8002302:	f1a1 0020 	sub.w	r0, r1, #32
 8002306:	fa22 f401 	lsr.w	r4, r2, r1
 800230a:	fa03 f606 	lsl.w	r6, r3, r6
 800230e:	4334      	orrs	r4, r6
 8002310:	fa23 f000 	lsr.w	r0, r3, r0
 8002314:	4304      	orrs	r4, r0
 8002316:	fa23 f501 	lsr.w	r5, r3, r1
 800231a:	b2a3      	uxth	r3, r4
 800231c:	4619      	mov	r1, r3
 800231e:	4660      	mov	r0, ip
 8002320:	f000 f85a 	bl	80023d8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002324:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002328:	f000 f872 	bl	8002410 <FLASH_WaitForLastOperation>
 800232c:	4603      	mov	r3, r0
 800232e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <HAL_FLASH_Program+0xdc>)
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	4a0c      	ldr	r2, [pc, #48]	; (8002368 <HAL_FLASH_Program+0xdc>)
 8002336:	f023 0301 	bic.w	r3, r3, #1
 800233a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800233c:	7dfb      	ldrb	r3, [r7, #23]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d107      	bne.n	8002352 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002342:	7dbb      	ldrb	r3, [r7, #22]
 8002344:	3301      	adds	r3, #1
 8002346:	75bb      	strb	r3, [r7, #22]
 8002348:	7dba      	ldrb	r2, [r7, #22]
 800234a:	7d7b      	ldrb	r3, [r7, #21]
 800234c:	429a      	cmp	r2, r3
 800234e:	d3cd      	bcc.n	80022ec <HAL_FLASH_Program+0x60>
 8002350:	e000      	b.n	8002354 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002352:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_FLASH_Program+0xd8>)
 8002356:	2200      	movs	r2, #0
 8002358:	761a      	strb	r2, [r3, #24]

  return status;
 800235a:	7dfb      	ldrb	r3, [r7, #23]
}
 800235c:	4618      	mov	r0, r3
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002364:	200001e8 	.word	0x200001e8
 8002368:	40022000 	.word	0x40022000

0800236c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_FLASH_Unlock+0x40>)
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00d      	beq.n	800239e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_FLASH_Unlock+0x40>)
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_FLASH_Unlock+0x44>)
 8002386:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_FLASH_Unlock+0x40>)
 800238a:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <HAL_FLASH_Unlock+0x48>)
 800238c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_FLASH_Unlock+0x40>)
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800239e:	79fb      	ldrb	r3, [r7, #7]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40022000 	.word	0x40022000
 80023b0:	45670123 	.word	0x45670123
 80023b4:	cdef89ab 	.word	0xcdef89ab

080023b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_FLASH_Lock+0x1c>)
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_FLASH_Lock+0x1c>)
 80023c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40022000 	.word	0x40022000

080023d8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <FLASH_Program_HalfWord+0x30>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <FLASH_Program_HalfWord+0x34>)
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <FLASH_Program_HalfWord+0x34>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	887a      	ldrh	r2, [r7, #2]
 80023fa:	801a      	strh	r2, [r3, #0]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	200001e8 	.word	0x200001e8
 800240c:	40022000 	.word	0x40022000

08002410 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002418:	f7ff fe26 	bl	8002068 <HAL_GetTick>
 800241c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800241e:	e010      	b.n	8002442 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002426:	d00c      	beq.n	8002442 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <FLASH_WaitForLastOperation+0x2e>
 800242e:	f7ff fe1b 	bl	8002068 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	d201      	bcs.n	8002442 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e025      	b.n	800248e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <FLASH_WaitForLastOperation+0x88>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1e8      	bne.n	8002420 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <FLASH_WaitForLastOperation+0x88>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <FLASH_WaitForLastOperation+0x88>)
 800245c:	2220      	movs	r2, #32
 800245e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <FLASH_WaitForLastOperation+0x88>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10b      	bne.n	8002484 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <FLASH_WaitForLastOperation+0x88>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002474:	2b00      	cmp	r3, #0
 8002476:	d105      	bne.n	8002484 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002478:	4b07      	ldr	r3, [pc, #28]	; (8002498 <FLASH_WaitForLastOperation+0x88>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002484:	f000 f80a 	bl	800249c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40022000 	.word	0x40022000

0800249c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <FLASH_SetErrorCode+0x98>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80024b2:	4b21      	ldr	r3, [pc, #132]	; (8002538 <FLASH_SetErrorCode+0x9c>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f043 0302 	orr.w	r3, r3, #2
 80024ba:	4a1f      	ldr	r2, [pc, #124]	; (8002538 <FLASH_SetErrorCode+0x9c>)
 80024bc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f043 0310 	orr.w	r3, r3, #16
 80024c4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <FLASH_SetErrorCode+0x98>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80024d2:	4b19      	ldr	r3, [pc, #100]	; (8002538 <FLASH_SetErrorCode+0x9c>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	4a17      	ldr	r2, [pc, #92]	; (8002538 <FLASH_SetErrorCode+0x9c>)
 80024dc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <FLASH_SetErrorCode+0x98>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <FLASH_SetErrorCode+0x9c>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <FLASH_SetErrorCode+0x9c>)
 80024fc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <FLASH_SetErrorCode+0x98>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a0c      	ldr	r2, [pc, #48]	; (8002534 <FLASH_SetErrorCode+0x98>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f240 1201 	movw	r2, #257	; 0x101
 8002510:	4293      	cmp	r3, r2
 8002512:	d106      	bne.n	8002522 <FLASH_SetErrorCode+0x86>
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <FLASH_SetErrorCode+0x98>)
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	4a06      	ldr	r2, [pc, #24]	; (8002534 <FLASH_SetErrorCode+0x98>)
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	61d3      	str	r3, [r2, #28]
}  
 8002520:	e002      	b.n	8002528 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002522:	4a04      	ldr	r2, [pc, #16]	; (8002534 <FLASH_SetErrorCode+0x98>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	60d3      	str	r3, [r2, #12]
}  
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000
 8002538:	200001e8 	.word	0x200001e8

0800253c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800254e:	4b2f      	ldr	r3, [pc, #188]	; (800260c <HAL_FLASHEx_Erase+0xd0>)
 8002550:	7e1b      	ldrb	r3, [r3, #24]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_FLASHEx_Erase+0x1e>
 8002556:	2302      	movs	r3, #2
 8002558:	e053      	b.n	8002602 <HAL_FLASHEx_Erase+0xc6>
 800255a:	4b2c      	ldr	r3, [pc, #176]	; (800260c <HAL_FLASHEx_Erase+0xd0>)
 800255c:	2201      	movs	r2, #1
 800255e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d116      	bne.n	8002596 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002568:	f24c 3050 	movw	r0, #50000	; 0xc350
 800256c:	f7ff ff50 	bl	8002410 <FLASH_WaitForLastOperation>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d141      	bne.n	80025fa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002576:	2001      	movs	r0, #1
 8002578:	f000 f84c 	bl	8002614 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800257c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002580:	f7ff ff46 	bl	8002410 <FLASH_WaitForLastOperation>
 8002584:	4603      	mov	r3, r0
 8002586:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <HAL_FLASHEx_Erase+0xd4>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	4a20      	ldr	r2, [pc, #128]	; (8002610 <HAL_FLASHEx_Erase+0xd4>)
 800258e:	f023 0304 	bic.w	r3, r3, #4
 8002592:	6113      	str	r3, [r2, #16]
 8002594:	e031      	b.n	80025fa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002596:	f24c 3050 	movw	r0, #50000	; 0xc350
 800259a:	f7ff ff39 	bl	8002410 <FLASH_WaitForLastOperation>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d12a      	bne.n	80025fa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f04f 32ff 	mov.w	r2, #4294967295
 80025aa:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	e019      	b.n	80025e8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80025b4:	68b8      	ldr	r0, [r7, #8]
 80025b6:	f000 f849 	bl	800264c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025be:	f7ff ff27 	bl	8002410 <FLASH_WaitForLastOperation>
 80025c2:	4603      	mov	r3, r0
 80025c4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_FLASHEx_Erase+0xd4>)
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	4a11      	ldr	r2, [pc, #68]	; (8002610 <HAL_FLASHEx_Erase+0xd4>)
 80025cc:	f023 0302 	bic.w	r3, r3, #2
 80025d0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	601a      	str	r2, [r3, #0]
            break;
 80025de:	e00c      	b.n	80025fa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025e6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	029a      	lsls	r2, r3, #10
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4413      	add	r3, r2
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d3dc      	bcc.n	80025b4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <HAL_FLASHEx_Erase+0xd0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	761a      	strb	r2, [r3, #24]

  return status;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200001e8 	.word	0x200001e8
 8002610:	40022000 	.word	0x40022000

08002614 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <FLASH_MassErase+0x30>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <FLASH_MassErase+0x34>)
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	4a08      	ldr	r2, [pc, #32]	; (8002648 <FLASH_MassErase+0x34>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <FLASH_MassErase+0x34>)
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	4a05      	ldr	r2, [pc, #20]	; (8002648 <FLASH_MassErase+0x34>)
 8002634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002638:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	200001e8 	.word	0x200001e8
 8002648:	40022000 	.word	0x40022000

0800264c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <FLASH_PageErase+0x38>)
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <FLASH_PageErase+0x3c>)
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <FLASH_PageErase+0x3c>)
 8002660:	f043 0302 	orr.w	r3, r3, #2
 8002664:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002666:	4a08      	ldr	r2, [pc, #32]	; (8002688 <FLASH_PageErase+0x3c>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <FLASH_PageErase+0x3c>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	4a05      	ldr	r2, [pc, #20]	; (8002688 <FLASH_PageErase+0x3c>)
 8002672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002676:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	200001e8 	.word	0x200001e8
 8002688:	40022000 	.word	0x40022000

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b480      	push	{r7}
 800268e:	b08b      	sub	sp, #44	; 0x2c
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269e:	e169      	b.n	8002974 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026a0:	2201      	movs	r2, #1
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f040 8158 	bne.w	800296e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a9a      	ldr	r2, [pc, #616]	; (800292c <HAL_GPIO_Init+0x2a0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d05e      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026c8:	4a98      	ldr	r2, [pc, #608]	; (800292c <HAL_GPIO_Init+0x2a0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d875      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026ce:	4a98      	ldr	r2, [pc, #608]	; (8002930 <HAL_GPIO_Init+0x2a4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d058      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026d4:	4a96      	ldr	r2, [pc, #600]	; (8002930 <HAL_GPIO_Init+0x2a4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d86f      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026da:	4a96      	ldr	r2, [pc, #600]	; (8002934 <HAL_GPIO_Init+0x2a8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d052      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026e0:	4a94      	ldr	r2, [pc, #592]	; (8002934 <HAL_GPIO_Init+0x2a8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d869      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026e6:	4a94      	ldr	r2, [pc, #592]	; (8002938 <HAL_GPIO_Init+0x2ac>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d04c      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026ec:	4a92      	ldr	r2, [pc, #584]	; (8002938 <HAL_GPIO_Init+0x2ac>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d863      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026f2:	4a92      	ldr	r2, [pc, #584]	; (800293c <HAL_GPIO_Init+0x2b0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d046      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026f8:	4a90      	ldr	r2, [pc, #576]	; (800293c <HAL_GPIO_Init+0x2b0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d85d      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026fe:	2b12      	cmp	r3, #18
 8002700:	d82a      	bhi.n	8002758 <HAL_GPIO_Init+0xcc>
 8002702:	2b12      	cmp	r3, #18
 8002704:	d859      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 8002706:	a201      	add	r2, pc, #4	; (adr r2, 800270c <HAL_GPIO_Init+0x80>)
 8002708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270c:	08002787 	.word	0x08002787
 8002710:	08002761 	.word	0x08002761
 8002714:	08002773 	.word	0x08002773
 8002718:	080027b5 	.word	0x080027b5
 800271c:	080027bb 	.word	0x080027bb
 8002720:	080027bb 	.word	0x080027bb
 8002724:	080027bb 	.word	0x080027bb
 8002728:	080027bb 	.word	0x080027bb
 800272c:	080027bb 	.word	0x080027bb
 8002730:	080027bb 	.word	0x080027bb
 8002734:	080027bb 	.word	0x080027bb
 8002738:	080027bb 	.word	0x080027bb
 800273c:	080027bb 	.word	0x080027bb
 8002740:	080027bb 	.word	0x080027bb
 8002744:	080027bb 	.word	0x080027bb
 8002748:	080027bb 	.word	0x080027bb
 800274c:	080027bb 	.word	0x080027bb
 8002750:	08002769 	.word	0x08002769
 8002754:	0800277d 	.word	0x0800277d
 8002758:	4a79      	ldr	r2, [pc, #484]	; (8002940 <HAL_GPIO_Init+0x2b4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800275e:	e02c      	b.n	80027ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	623b      	str	r3, [r7, #32]
          break;
 8002766:	e029      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	3304      	adds	r3, #4
 800276e:	623b      	str	r3, [r7, #32]
          break;
 8002770:	e024      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	3308      	adds	r3, #8
 8002778:	623b      	str	r3, [r7, #32]
          break;
 800277a:	e01f      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	330c      	adds	r3, #12
 8002782:	623b      	str	r3, [r7, #32]
          break;
 8002784:	e01a      	b.n	80027bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d102      	bne.n	8002794 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800278e:	2304      	movs	r3, #4
 8002790:	623b      	str	r3, [r7, #32]
          break;
 8002792:	e013      	b.n	80027bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800279c:	2308      	movs	r3, #8
 800279e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	611a      	str	r2, [r3, #16]
          break;
 80027a6:	e009      	b.n	80027bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a8:	2308      	movs	r3, #8
 80027aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	615a      	str	r2, [r3, #20]
          break;
 80027b2:	e003      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027b4:	2300      	movs	r3, #0
 80027b6:	623b      	str	r3, [r7, #32]
          break;
 80027b8:	e000      	b.n	80027bc <HAL_GPIO_Init+0x130>
          break;
 80027ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2bff      	cmp	r3, #255	; 0xff
 80027c0:	d801      	bhi.n	80027c6 <HAL_GPIO_Init+0x13a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	e001      	b.n	80027ca <HAL_GPIO_Init+0x13e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2bff      	cmp	r3, #255	; 0xff
 80027d0:	d802      	bhi.n	80027d8 <HAL_GPIO_Init+0x14c>
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	e002      	b.n	80027de <HAL_GPIO_Init+0x152>
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	3b08      	subs	r3, #8
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	210f      	movs	r1, #15
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	401a      	ands	r2, r3
 80027f0:	6a39      	ldr	r1, [r7, #32]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	431a      	orrs	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 80b1 	beq.w	800296e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800280c:	4b4d      	ldr	r3, [pc, #308]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	4a4c      	ldr	r2, [pc, #304]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6193      	str	r3, [r2, #24]
 8002818:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002824:	4a48      	ldr	r2, [pc, #288]	; (8002948 <HAL_GPIO_Init+0x2bc>)
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	3302      	adds	r3, #2
 800282c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002830:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	220f      	movs	r2, #15
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a40      	ldr	r2, [pc, #256]	; (800294c <HAL_GPIO_Init+0x2c0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d013      	beq.n	8002878 <HAL_GPIO_Init+0x1ec>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a3f      	ldr	r2, [pc, #252]	; (8002950 <HAL_GPIO_Init+0x2c4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00d      	beq.n	8002874 <HAL_GPIO_Init+0x1e8>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a3e      	ldr	r2, [pc, #248]	; (8002954 <HAL_GPIO_Init+0x2c8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d007      	beq.n	8002870 <HAL_GPIO_Init+0x1e4>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a3d      	ldr	r2, [pc, #244]	; (8002958 <HAL_GPIO_Init+0x2cc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d101      	bne.n	800286c <HAL_GPIO_Init+0x1e0>
 8002868:	2303      	movs	r3, #3
 800286a:	e006      	b.n	800287a <HAL_GPIO_Init+0x1ee>
 800286c:	2304      	movs	r3, #4
 800286e:	e004      	b.n	800287a <HAL_GPIO_Init+0x1ee>
 8002870:	2302      	movs	r3, #2
 8002872:	e002      	b.n	800287a <HAL_GPIO_Init+0x1ee>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <HAL_GPIO_Init+0x1ee>
 8002878:	2300      	movs	r3, #0
 800287a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287c:	f002 0203 	and.w	r2, r2, #3
 8002880:	0092      	lsls	r2, r2, #2
 8002882:	4093      	lsls	r3, r2
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800288a:	492f      	ldr	r1, [pc, #188]	; (8002948 <HAL_GPIO_Init+0x2bc>)
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	3302      	adds	r3, #2
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d006      	beq.n	80028b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028a4:	4b2d      	ldr	r3, [pc, #180]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	492c      	ldr	r1, [pc, #176]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	608b      	str	r3, [r1, #8]
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028b2:	4b2a      	ldr	r3, [pc, #168]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	4928      	ldr	r1, [pc, #160]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028bc:	4013      	ands	r3, r2
 80028be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028cc:	4b23      	ldr	r3, [pc, #140]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	4922      	ldr	r1, [pc, #136]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60cb      	str	r3, [r1, #12]
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028da:	4b20      	ldr	r3, [pc, #128]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	491e      	ldr	r1, [pc, #120]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d006      	beq.n	8002902 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028f4:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4918      	ldr	r1, [pc, #96]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
 8002900:	e006      	b.n	8002910 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002902:	4b16      	ldr	r3, [pc, #88]	; (800295c <HAL_GPIO_Init+0x2d0>)
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	43db      	mvns	r3, r3
 800290a:	4914      	ldr	r1, [pc, #80]	; (800295c <HAL_GPIO_Init+0x2d0>)
 800290c:	4013      	ands	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d021      	beq.n	8002960 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <HAL_GPIO_Init+0x2d0>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	490e      	ldr	r1, [pc, #56]	; (800295c <HAL_GPIO_Init+0x2d0>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	600b      	str	r3, [r1, #0]
 8002928:	e021      	b.n	800296e <HAL_GPIO_Init+0x2e2>
 800292a:	bf00      	nop
 800292c:	10320000 	.word	0x10320000
 8002930:	10310000 	.word	0x10310000
 8002934:	10220000 	.word	0x10220000
 8002938:	10210000 	.word	0x10210000
 800293c:	10120000 	.word	0x10120000
 8002940:	10110000 	.word	0x10110000
 8002944:	40021000 	.word	0x40021000
 8002948:	40010000 	.word	0x40010000
 800294c:	40010800 	.word	0x40010800
 8002950:	40010c00 	.word	0x40010c00
 8002954:	40011000 	.word	0x40011000
 8002958:	40011400 	.word	0x40011400
 800295c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_GPIO_Init+0x304>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	43db      	mvns	r3, r3
 8002968:	4909      	ldr	r1, [pc, #36]	; (8002990 <HAL_GPIO_Init+0x304>)
 800296a:	4013      	ands	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	3301      	adds	r3, #1
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	f47f ae8e 	bne.w	80026a0 <HAL_GPIO_Init+0x14>
  }
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	372c      	adds	r7, #44	; 0x2c
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40010400 	.word	0x40010400

08002994 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	887b      	ldrh	r3, [r7, #2]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e001      	b.n	80029b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029b2:	2300      	movs	r3, #0
 80029b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	807b      	strh	r3, [r7, #2]
 80029ce:	4613      	mov	r3, r2
 80029d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029d2:	787b      	ldrb	r3, [r7, #1]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d8:	887a      	ldrh	r2, [r7, #2]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029de:	e003      	b.n	80029e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	041a      	lsls	r2, r3, #16
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	611a      	str	r2, [r3, #16]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a04:	887a      	ldrh	r2, [r7, #2]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	041a      	lsls	r2, r3, #16
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	400b      	ands	r3, r1
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	611a      	str	r2, [r3, #16]
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e272      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8087 	beq.w	8002b52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a44:	4b92      	ldr	r3, [pc, #584]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d00c      	beq.n	8002a6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a50:	4b8f      	ldr	r3, [pc, #572]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d112      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5e>
 8002a5c:	4b8c      	ldr	r3, [pc, #560]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a68:	d10b      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6a:	4b89      	ldr	r3, [pc, #548]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d06c      	beq.n	8002b50 <HAL_RCC_OscConfig+0x12c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d168      	bne.n	8002b50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e24c      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x76>
 8002a8c:	4b80      	ldr	r3, [pc, #512]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a7f      	ldr	r2, [pc, #508]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e02e      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0x98>
 8002aa2:	4b7b      	ldr	r3, [pc, #492]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a7a      	ldr	r2, [pc, #488]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	4b78      	ldr	r3, [pc, #480]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a77      	ldr	r2, [pc, #476]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e01d      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0xbc>
 8002ac6:	4b72      	ldr	r3, [pc, #456]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a71      	ldr	r2, [pc, #452]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b6f      	ldr	r3, [pc, #444]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6e      	ldr	r2, [pc, #440]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002ae0:	4b6b      	ldr	r3, [pc, #428]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a6a      	ldr	r2, [pc, #424]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b68      	ldr	r3, [pc, #416]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a67      	ldr	r2, [pc, #412]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7ff fab2 	bl	8002068 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b08:	f7ff faae 	bl	8002068 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e200      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0xe4>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7ff fa9e 	bl	8002068 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b30:	f7ff fa9a 	bl	8002068 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e1ec      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x10c>
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d063      	beq.n	8002c26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b6a:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d11c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x18c>
 8002b76:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d116      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_RCC_OscConfig+0x176>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e1c0      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9a:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4939      	ldr	r1, [pc, #228]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bae:	e03a      	b.n	8002c26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d020      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb8:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7ff fa53 	bl	8002068 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7ff fa4f 	bl	8002068 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e1a1      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4927      	ldr	r1, [pc, #156]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]
 8002bf8:	e015      	b.n	8002c26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7ff fa32 	bl	8002068 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c08:	f7ff fa2e 	bl	8002068 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e180      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d03a      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c40:	f7ff fa12 	bl	8002068 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c48:	f7ff fa0e 	bl	8002068 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e160      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c66:	2001      	movs	r0, #1
 8002c68:	f000 face 	bl	8003208 <RCC_Delay>
 8002c6c:	e01c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7ff f9f8 	bl	8002068 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7a:	e00f      	b.n	8002c9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7ff f9f4 	bl	8002068 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d908      	bls.n	8002c9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e146      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	42420000 	.word	0x42420000
 8002c98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b92      	ldr	r3, [pc, #584]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e9      	bne.n	8002c7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80a6 	beq.w	8002e02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b8b      	ldr	r3, [pc, #556]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4a87      	ldr	r2, [pc, #540]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	61d3      	str	r3, [r2, #28]
 8002cd2:	4b85      	ldr	r3, [pc, #532]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	4b82      	ldr	r3, [pc, #520]	; (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d118      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cee:	4b7f      	ldr	r3, [pc, #508]	; (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7e      	ldr	r2, [pc, #504]	; (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfa:	f7ff f9b5 	bl	8002068 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7ff f9b1 	bl	8002068 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	; 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e103      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	4b75      	ldr	r3, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x312>
 8002d28:	4b6f      	ldr	r3, [pc, #444]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4a6e      	ldr	r2, [pc, #440]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6213      	str	r3, [r2, #32]
 8002d34:	e02d      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x334>
 8002d3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4a69      	ldr	r2, [pc, #420]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6213      	str	r3, [r2, #32]
 8002d4a:	4b67      	ldr	r3, [pc, #412]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4a66      	ldr	r2, [pc, #408]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	6213      	str	r3, [r2, #32]
 8002d56:	e01c      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x356>
 8002d60:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4a60      	ldr	r2, [pc, #384]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6213      	str	r3, [r2, #32]
 8002d6c:	4b5e      	ldr	r3, [pc, #376]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4a5d      	ldr	r2, [pc, #372]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6213      	str	r3, [r2, #32]
 8002d78:	e00b      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d7a:	4b5b      	ldr	r3, [pc, #364]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4a5a      	ldr	r2, [pc, #360]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6213      	str	r3, [r2, #32]
 8002d86:	4b58      	ldr	r3, [pc, #352]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a57      	ldr	r2, [pc, #348]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d015      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7ff f965 	bl	8002068 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7ff f961 	bl	8002068 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0b1      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	4b4b      	ldr	r3, [pc, #300]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ee      	beq.n	8002da2 <HAL_RCC_OscConfig+0x37e>
 8002dc4:	e014      	b.n	8002df0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7ff f94f 	bl	8002068 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7ff f94b 	bl	8002068 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e09b      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	4b40      	ldr	r3, [pc, #256]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ee      	bne.n	8002dce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8087 	beq.w	8002f1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e0c:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d061      	beq.n	8002edc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d146      	bne.n	8002eae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e20:	4b33      	ldr	r3, [pc, #204]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7ff f91f 	bl	8002068 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7ff f91b 	bl	8002068 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e06d      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e40:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e54:	d108      	bne.n	8002e68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e56:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	4921      	ldr	r1, [pc, #132]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e68:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a19      	ldr	r1, [r3, #32]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	491b      	ldr	r1, [pc, #108]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7ff f8ef 	bl	8002068 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7ff f8eb 	bl	8002068 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e03d      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x46a>
 8002eac:	e035      	b.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7ff f8d8 	bl	8002068 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7ff f8d4 	bl	8002068 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e026      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x498>
 8002eda:	e01e      	b.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e019      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_OscConfig+0x500>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000

08002f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0d0      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b6a      	ldr	r3, [pc, #424]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d910      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b67      	ldr	r3, [pc, #412]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 0207 	bic.w	r2, r3, #7
 8002f52:	4965      	ldr	r1, [pc, #404]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b63      	ldr	r3, [pc, #396]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0b8      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f84:	4b59      	ldr	r3, [pc, #356]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a58      	ldr	r2, [pc, #352]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f9c:	4b53      	ldr	r3, [pc, #332]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a52      	ldr	r2, [pc, #328]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa8:	4b50      	ldr	r3, [pc, #320]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	494d      	ldr	r1, [pc, #308]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d040      	beq.n	8003048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b47      	ldr	r3, [pc, #284]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d115      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07f      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	4b41      	ldr	r3, [pc, #260]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e073      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	4b3d      	ldr	r3, [pc, #244]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e06b      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003006:	4b39      	ldr	r3, [pc, #228]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4936      	ldr	r1, [pc, #216]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003018:	f7ff f826 	bl	8002068 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	e00a      	b.n	8003036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7ff f822 	bl	8002068 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e053      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 020c 	and.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1eb      	bne.n	8003020 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d210      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 0207 	bic.w	r2, r3, #7
 800305e:	4922      	ldr	r1, [pc, #136]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e032      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4916      	ldr	r1, [pc, #88]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	490e      	ldr	r1, [pc, #56]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030b6:	f000 f821 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80030ba:	4602      	mov	r2, r0
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	490a      	ldr	r1, [pc, #40]	; (80030f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	5ccb      	ldrb	r3, [r1, r3]
 80030ca:	fa22 f303 	lsr.w	r3, r2, r3
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <HAL_RCC_ClockConfig+0x1cc>)
 80030d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_RCC_ClockConfig+0x1d0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe ff84 	bl	8001fe4 <HAL_InitTick>

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40022000 	.word	0x40022000
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08004cb8 	.word	0x08004cb8
 80030f4:	20000004 	.word	0x20000004
 80030f8:	20000008 	.word	0x20000008

080030fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003116:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <HAL_RCC_GetSysClockFreq+0x94>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b04      	cmp	r3, #4
 8003124:	d002      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x30>
 8003126:	2b08      	cmp	r3, #8
 8003128:	d003      	beq.n	8003132 <HAL_RCC_GetSysClockFreq+0x36>
 800312a:	e027      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800312c:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800312e:	613b      	str	r3, [r7, #16]
      break;
 8003130:	e027      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	0c9b      	lsrs	r3, r3, #18
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	4a17      	ldr	r2, [pc, #92]	; (8003198 <HAL_RCC_GetSysClockFreq+0x9c>)
 800313c:	5cd3      	ldrb	r3, [r2, r3]
 800313e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d010      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <HAL_RCC_GetSysClockFreq+0x94>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	0c5b      	lsrs	r3, r3, #17
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	4a11      	ldr	r2, [pc, #68]	; (800319c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800315e:	fb03 f202 	mul.w	r2, r3, r2
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	e004      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a0c      	ldr	r2, [pc, #48]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003170:	fb02 f303 	mul.w	r3, r2, r3
 8003174:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	613b      	str	r3, [r7, #16]
      break;
 800317a:	e002      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800317e:	613b      	str	r3, [r7, #16]
      break;
 8003180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003182:	693b      	ldr	r3, [r7, #16]
}
 8003184:	4618      	mov	r0, r3
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	007a1200 	.word	0x007a1200
 8003198:	08004cd0 	.word	0x08004cd0
 800319c:	08004ce0 	.word	0x08004ce0
 80031a0:	003d0900 	.word	0x003d0900

080031a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a8:	4b02      	ldr	r3, [pc, #8]	; (80031b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	20000004 	.word	0x20000004

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031bc:	f7ff fff2 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4903      	ldr	r1, [pc, #12]	; (80031dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	08004cc8 	.word	0x08004cc8

080031e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031e4:	f7ff ffde 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	0adb      	lsrs	r3, r3, #11
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4903      	ldr	r1, [pc, #12]	; (8003204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	08004cc8 	.word	0x08004cc8

08003208 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <RCC_Delay+0x34>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <RCC_Delay+0x38>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	0a5b      	lsrs	r3, r3, #9
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003224:	bf00      	nop
  }
  while (Delay --);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1e5a      	subs	r2, r3, #1
 800322a:	60fa      	str	r2, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f9      	bne.n	8003224 <RCC_Delay+0x1c>
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	20000004 	.word	0x20000004
 8003240:	10624dd3 	.word	0x10624dd3

08003244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e076      	b.n	8003344 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2b00      	cmp	r3, #0
 800325c:	d108      	bne.n	8003270 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003266:	d009      	beq.n	800327c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	61da      	str	r2, [r3, #28]
 800326e:	e005      	b.n	800327c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fe fd2c 	bl	8001cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003300:	ea42 0103 	orr.w	r1, r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	0c1a      	lsrs	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f002 0204 	and.w	r2, r2, #4
 8003322:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003332:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08c      	sub	sp, #48	; 0x30
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800335a:	2301      	movs	r3, #1
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_SPI_TransmitReceive+0x26>
 800336e:	2302      	movs	r3, #2
 8003370:	e198      	b.n	80036a4 <HAL_SPI_TransmitReceive+0x358>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800337a:	f7fe fe75 	bl	8002068 <HAL_GetTick>
 800337e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003390:	887b      	ldrh	r3, [r7, #2]
 8003392:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003394:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003398:	2b01      	cmp	r3, #1
 800339a:	d00f      	beq.n	80033bc <HAL_SPI_TransmitReceive+0x70>
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033a2:	d107      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x68>
 80033ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d003      	beq.n	80033bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80033b4:	2302      	movs	r3, #2
 80033b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033ba:	e16d      	b.n	8003698 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <HAL_SPI_TransmitReceive+0x82>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_SPI_TransmitReceive+0x82>
 80033c8:	887b      	ldrh	r3, [r7, #2]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033d4:	e160      	b.n	8003698 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d003      	beq.n	80033ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2205      	movs	r2, #5
 80033e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	887a      	ldrh	r2, [r7, #2]
 80033fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	887a      	ldrh	r2, [r7, #2]
 8003400:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	887a      	ldrh	r2, [r7, #2]
 8003412:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d007      	beq.n	800343e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800343c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003446:	d17c      	bne.n	8003542 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_SPI_TransmitReceive+0x10a>
 8003450:	8b7b      	ldrh	r3, [r7, #26]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d16a      	bne.n	800352c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	881a      	ldrh	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	1c9a      	adds	r2, r3, #2
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800347a:	e057      	b.n	800352c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b02      	cmp	r3, #2
 8003488:	d11b      	bne.n	80034c2 <HAL_SPI_TransmitReceive+0x176>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d016      	beq.n	80034c2 <HAL_SPI_TransmitReceive+0x176>
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	2b01      	cmp	r3, #1
 8003498:	d113      	bne.n	80034c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	881a      	ldrh	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	1c9a      	adds	r2, r3, #2
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d119      	bne.n	8003504 <HAL_SPI_TransmitReceive+0x1b8>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d014      	beq.n	8003504 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	b292      	uxth	r2, r2
 80034e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	1c9a      	adds	r2, r3, #2
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003500:	2301      	movs	r3, #1
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003504:	f7fe fdb0 	bl	8002068 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003510:	429a      	cmp	r2, r3
 8003512:	d80b      	bhi.n	800352c <HAL_SPI_TransmitReceive+0x1e0>
 8003514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d007      	beq.n	800352c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800352a:	e0b5      	b.n	8003698 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1a2      	bne.n	800347c <HAL_SPI_TransmitReceive+0x130>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d19d      	bne.n	800347c <HAL_SPI_TransmitReceive+0x130>
 8003540:	e080      	b.n	8003644 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_SPI_TransmitReceive+0x204>
 800354a:	8b7b      	ldrh	r3, [r7, #26]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d16f      	bne.n	8003630 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	7812      	ldrb	r2, [r2, #0]
 800355c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003576:	e05b      	b.n	8003630 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b02      	cmp	r3, #2
 8003584:	d11c      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x274>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d017      	beq.n	80035c0 <HAL_SPI_TransmitReceive+0x274>
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d114      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	330c      	adds	r3, #12
 80035a0:	7812      	ldrb	r2, [r2, #0]
 80035a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d119      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x2b6>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d014      	beq.n	8003602 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035fe:	2301      	movs	r3, #1
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003602:	f7fe fd31 	bl	8002068 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800360e:	429a      	cmp	r2, r3
 8003610:	d803      	bhi.n	800361a <HAL_SPI_TransmitReceive+0x2ce>
 8003612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d102      	bne.n	8003620 <HAL_SPI_TransmitReceive+0x2d4>
 800361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361c:	2b00      	cmp	r3, #0
 800361e:	d107      	bne.n	8003630 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800362e:	e033      	b.n	8003698 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d19e      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x22c>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d199      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003646:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f8b7 	bl	80037bc <SPI_EndRxTxTransaction>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d006      	beq.n	8003662 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003660:	e01a      	b.n	8003698 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800368e:	e003      	b.n	8003698 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3730      	adds	r7, #48	; 0x30
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036bc:	f7fe fcd4 	bl	8002068 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	4413      	add	r3, r2
 80036ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036cc:	f7fe fccc 	bl	8002068 <HAL_GetTick>
 80036d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036d2:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	015b      	lsls	r3, r3, #5
 80036d8:	0d1b      	lsrs	r3, r3, #20
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	fb02 f303 	mul.w	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036e2:	e054      	b.n	800378e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d050      	beq.n	800378e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036ec:	f7fe fcbc 	bl	8002068 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d902      	bls.n	8003702 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d13d      	bne.n	800377e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003710:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800371a:	d111      	bne.n	8003740 <SPI_WaitFlagStateUntilTimeout+0x94>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003724:	d004      	beq.n	8003730 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372e:	d107      	bne.n	8003740 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800373e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003748:	d10f      	bne.n	800376a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003768:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e017      	b.n	80037ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	3b01      	subs	r3, #1
 800378c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4013      	ands	r3, r2
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	bf0c      	ite	eq
 800379e:	2301      	moveq	r3, #1
 80037a0:	2300      	movne	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d19b      	bne.n	80036e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000004 	.word	0x20000004

080037bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2200      	movs	r2, #0
 80037d0:	2180      	movs	r1, #128	; 0x80
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7ff ff6a 	bl	80036ac <SPI_WaitFlagStateUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e000      	b.n	80037f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e041      	b.n	800388e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fe fab4 	bl	8001d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3304      	adds	r3, #4
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f000 f9e2 	bl	8003c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d001      	beq.n	80038b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e032      	b.n	8003916 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a18      	ldr	r2, [pc, #96]	; (8003920 <HAL_TIM_Base_Start+0x88>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00e      	beq.n	80038e0 <HAL_TIM_Base_Start+0x48>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ca:	d009      	beq.n	80038e0 <HAL_TIM_Base_Start+0x48>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a14      	ldr	r2, [pc, #80]	; (8003924 <HAL_TIM_Base_Start+0x8c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <HAL_TIM_Base_Start+0x48>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a13      	ldr	r2, [pc, #76]	; (8003928 <HAL_TIM_Base_Start+0x90>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d111      	bne.n	8003904 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d010      	beq.n	8003914 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0201 	orr.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003902:	e007      	b.n	8003914 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	40012c00 	.word	0x40012c00
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800

0800392c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_TIM_PWM_Start+0x24>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e022      	b.n	8003996 <HAL_TIM_PWM_Start+0x6a>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b04      	cmp	r3, #4
 8003954:	d109      	bne.n	800396a <HAL_TIM_PWM_Start+0x3e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	bf14      	ite	ne
 8003962:	2301      	movne	r3, #1
 8003964:	2300      	moveq	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	e015      	b.n	8003996 <HAL_TIM_PWM_Start+0x6a>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b08      	cmp	r3, #8
 800396e:	d109      	bne.n	8003984 <HAL_TIM_PWM_Start+0x58>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	bf14      	ite	ne
 800397c:	2301      	movne	r3, #1
 800397e:	2300      	moveq	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	e008      	b.n	8003996 <HAL_TIM_PWM_Start+0x6a>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	bf14      	ite	ne
 8003990:	2301      	movne	r3, #1
 8003992:	2300      	moveq	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e05e      	b.n	8003a5c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d104      	bne.n	80039ae <HAL_TIM_PWM_Start+0x82>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ac:	e013      	b.n	80039d6 <HAL_TIM_PWM_Start+0xaa>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d104      	bne.n	80039be <HAL_TIM_PWM_Start+0x92>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039bc:	e00b      	b.n	80039d6 <HAL_TIM_PWM_Start+0xaa>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d104      	bne.n	80039ce <HAL_TIM_PWM_Start+0xa2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039cc:	e003      	b.n	80039d6 <HAL_TIM_PWM_Start+0xaa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2201      	movs	r2, #1
 80039dc:	6839      	ldr	r1, [r7, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fa06 	bl	8003df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a1e      	ldr	r2, [pc, #120]	; (8003a64 <HAL_TIM_PWM_Start+0x138>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d107      	bne.n	80039fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <HAL_TIM_PWM_Start+0x138>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00e      	beq.n	8003a26 <HAL_TIM_PWM_Start+0xfa>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a10:	d009      	beq.n	8003a26 <HAL_TIM_PWM_Start+0xfa>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <HAL_TIM_PWM_Start+0x13c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d004      	beq.n	8003a26 <HAL_TIM_PWM_Start+0xfa>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <HAL_TIM_PWM_Start+0x140>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d111      	bne.n	8003a4a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b06      	cmp	r3, #6
 8003a36:	d010      	beq.n	8003a5a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a48:	e007      	b.n	8003a5a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40012c00 	.word	0x40012c00
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800

08003a70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_TIM_ConfigClockSource+0x1c>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e0b4      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x186>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac4:	d03e      	beq.n	8003b44 <HAL_TIM_ConfigClockSource+0xd4>
 8003ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aca:	f200 8087 	bhi.w	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad2:	f000 8086 	beq.w	8003be2 <HAL_TIM_ConfigClockSource+0x172>
 8003ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ada:	d87f      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003adc:	2b70      	cmp	r3, #112	; 0x70
 8003ade:	d01a      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0xa6>
 8003ae0:	2b70      	cmp	r3, #112	; 0x70
 8003ae2:	d87b      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ae4:	2b60      	cmp	r3, #96	; 0x60
 8003ae6:	d050      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x11a>
 8003ae8:	2b60      	cmp	r3, #96	; 0x60
 8003aea:	d877      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003aec:	2b50      	cmp	r3, #80	; 0x50
 8003aee:	d03c      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0xfa>
 8003af0:	2b50      	cmp	r3, #80	; 0x50
 8003af2:	d873      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d058      	beq.n	8003baa <HAL_TIM_ConfigClockSource+0x13a>
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d86f      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b30      	cmp	r3, #48	; 0x30
 8003afe:	d064      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15a>
 8003b00:	2b30      	cmp	r3, #48	; 0x30
 8003b02:	d86b      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d060      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15a>
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d867      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d05c      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15a>
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d05a      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x15a>
 8003b14:	e062      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b26:	f000 f944 	bl	8003db2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	609a      	str	r2, [r3, #8]
      break;
 8003b42:	e04f      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b54:	f000 f92d 	bl	8003db2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b66:	609a      	str	r2, [r3, #8]
      break;
 8003b68:	e03c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b76:	461a      	mov	r2, r3
 8003b78:	f000 f8a4 	bl	8003cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2150      	movs	r1, #80	; 0x50
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f8fb 	bl	8003d7e <TIM_ITRx_SetConfig>
      break;
 8003b88:	e02c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b96:	461a      	mov	r2, r3
 8003b98:	f000 f8c2 	bl	8003d20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2160      	movs	r1, #96	; 0x60
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f8eb 	bl	8003d7e <TIM_ITRx_SetConfig>
      break;
 8003ba8:	e01c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f000 f884 	bl	8003cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2140      	movs	r1, #64	; 0x40
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 f8db 	bl	8003d7e <TIM_ITRx_SetConfig>
      break;
 8003bc8:	e00c      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f000 f8d2 	bl	8003d7e <TIM_ITRx_SetConfig>
      break;
 8003bda:	e003      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      break;
 8003be0:	e000      	b.n	8003be4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a29      	ldr	r2, [pc, #164]	; (8003cb8 <TIM_Base_SetConfig+0xb8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00b      	beq.n	8003c30 <TIM_Base_SetConfig+0x30>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1e:	d007      	beq.n	8003c30 <TIM_Base_SetConfig+0x30>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a26      	ldr	r2, [pc, #152]	; (8003cbc <TIM_Base_SetConfig+0xbc>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_Base_SetConfig+0x30>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a25      	ldr	r2, [pc, #148]	; (8003cc0 <TIM_Base_SetConfig+0xc0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d108      	bne.n	8003c42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1c      	ldr	r2, [pc, #112]	; (8003cb8 <TIM_Base_SetConfig+0xb8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00b      	beq.n	8003c62 <TIM_Base_SetConfig+0x62>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c50:	d007      	beq.n	8003c62 <TIM_Base_SetConfig+0x62>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <TIM_Base_SetConfig+0xbc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_Base_SetConfig+0x62>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <TIM_Base_SetConfig+0xc0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d108      	bne.n	8003c74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <TIM_Base_SetConfig+0xb8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d103      	bne.n	8003ca8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	615a      	str	r2, [r3, #20]
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800

08003cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f023 0201 	bic.w	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 030a 	bic.w	r3, r3, #10
 8003d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	621a      	str	r2, [r3, #32]
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f023 0210 	bic.w	r2, r3, #16
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	031b      	lsls	r3, r3, #12
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	621a      	str	r2, [r3, #32]
}
 8003d74:	bf00      	nop
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b085      	sub	sp, #20
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f043 0307 	orr.w	r3, r3, #7
 8003da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	609a      	str	r2, [r3, #8]
}
 8003da8:	bf00      	nop
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr

08003db2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b087      	sub	sp, #28
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	021a      	lsls	r2, r3, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	609a      	str	r2, [r3, #8]
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	2201      	movs	r2, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a1a      	ldr	r2, [r3, #32]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	401a      	ands	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a1a      	ldr	r2, [r3, #32]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	fa01 f303 	lsl.w	r3, r1, r3
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e046      	b.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a16      	ldr	r2, [pc, #88]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00e      	beq.n	8003eb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9c:	d009      	beq.n	8003eb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a12      	ldr	r2, [pc, #72]	; (8003eec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d10c      	bne.n	8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	40000400 	.word	0x40000400
 8003ef0:	40000800 	.word	0x40000800

08003ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e042      	b.n	8003f8c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fd ff68 	bl	8001df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f91d 	bl	8004178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d16d      	bne.n	8004090 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_UART_Transmit+0x2c>
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e066      	b.n	8004092 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2221      	movs	r2, #33	; 0x21
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fd2:	f7fe f849 	bl	8002068 <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	88fa      	ldrh	r2, [r7, #6]
 8003fdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	88fa      	ldrh	r2, [r7, #6]
 8003fe2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fec:	d108      	bne.n	8004000 <HAL_UART_Transmit+0x6c>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d104      	bne.n	8004000 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	e003      	b.n	8004008 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004004:	2300      	movs	r3, #0
 8004006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004008:	e02a      	b.n	8004060 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2200      	movs	r2, #0
 8004012:	2180      	movs	r1, #128	; 0x80
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f840 	bl	800409a <UART_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e036      	b.n	8004092 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10b      	bne.n	8004042 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004038:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	3302      	adds	r3, #2
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	e007      	b.n	8004052 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	3301      	adds	r3, #1
 8004050:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1cf      	bne.n	800400a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2200      	movs	r2, #0
 8004072:	2140      	movs	r1, #64	; 0x40
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f810 	bl	800409a <UART_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e006      	b.n	8004092 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	e000      	b.n	8004092 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004090:	2302      	movs	r3, #2
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	3720      	adds	r7, #32
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b090      	sub	sp, #64	; 0x40
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	4613      	mov	r3, r2
 80040a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040aa:	e050      	b.n	800414e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d04c      	beq.n	800414e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <UART_WaitOnFlagUntilTimeout+0x30>
 80040ba:	f7fd ffd5 	bl	8002068 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d241      	bcs.n	800414e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	330c      	adds	r3, #12
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	330c      	adds	r3, #12
 80040e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040ea:	637a      	str	r2, [r7, #52]	; 0x34
 80040ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e5      	bne.n	80040ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3314      	adds	r3, #20
 8004104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	613b      	str	r3, [r7, #16]
   return(result);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	63bb      	str	r3, [r7, #56]	; 0x38
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3314      	adds	r3, #20
 800411c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800411e:	623a      	str	r2, [r7, #32]
 8004120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	69f9      	ldr	r1, [r7, #28]
 8004124:	6a3a      	ldr	r2, [r7, #32]
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	61bb      	str	r3, [r7, #24]
   return(result);
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e5      	bne.n	80040fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e00f      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4013      	ands	r3, r2
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	429a      	cmp	r2, r3
 800415c:	bf0c      	ite	eq
 800415e:	2301      	moveq	r3, #1
 8004160:	2300      	movne	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	429a      	cmp	r2, r3
 800416a:	d09f      	beq.n	80040ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3740      	adds	r7, #64	; 0x40
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041b2:	f023 030c 	bic.w	r3, r3, #12
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6812      	ldr	r2, [r2, #0]
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	430b      	orrs	r3, r1
 80041be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2c      	ldr	r2, [pc, #176]	; (800428c <UART_SetConfig+0x114>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d103      	bne.n	80041e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041e0:	f7fe fffe 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	e002      	b.n	80041ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041e8:	f7fe ffe6 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 80041ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	009a      	lsls	r2, r3, #2
 80041f8:	441a      	add	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	4a22      	ldr	r2, [pc, #136]	; (8004290 <UART_SetConfig+0x118>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	0119      	lsls	r1, r3, #4
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009a      	lsls	r2, r3, #2
 8004218:	441a      	add	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	fbb2 f2f3 	udiv	r2, r2, r3
 8004224:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <UART_SetConfig+0x118>)
 8004226:	fba3 0302 	umull	r0, r3, r3, r2
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	2064      	movs	r0, #100	; 0x64
 800422e:	fb00 f303 	mul.w	r3, r0, r3
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	3332      	adds	r3, #50	; 0x32
 8004238:	4a15      	ldr	r2, [pc, #84]	; (8004290 <UART_SetConfig+0x118>)
 800423a:	fba2 2303 	umull	r2, r3, r2, r3
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004244:	4419      	add	r1, r3
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	009a      	lsls	r2, r3, #2
 8004250:	441a      	add	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	fbb2 f2f3 	udiv	r2, r2, r3
 800425c:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <UART_SetConfig+0x118>)
 800425e:	fba3 0302 	umull	r0, r3, r3, r2
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	2064      	movs	r0, #100	; 0x64
 8004266:	fb00 f303 	mul.w	r3, r0, r3
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	3332      	adds	r3, #50	; 0x32
 8004270:	4a07      	ldr	r2, [pc, #28]	; (8004290 <UART_SetConfig+0x118>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	f003 020f 	and.w	r2, r3, #15
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	440a      	add	r2, r1
 8004282:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40013800 	.word	0x40013800
 8004290:	51eb851f 	.word	0x51eb851f

08004294 <siprintf>:
 8004294:	b40e      	push	{r1, r2, r3}
 8004296:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800429a:	b500      	push	{lr}
 800429c:	b09c      	sub	sp, #112	; 0x70
 800429e:	ab1d      	add	r3, sp, #116	; 0x74
 80042a0:	9002      	str	r0, [sp, #8]
 80042a2:	9006      	str	r0, [sp, #24]
 80042a4:	9107      	str	r1, [sp, #28]
 80042a6:	9104      	str	r1, [sp, #16]
 80042a8:	4808      	ldr	r0, [pc, #32]	; (80042cc <siprintf+0x38>)
 80042aa:	4909      	ldr	r1, [pc, #36]	; (80042d0 <siprintf+0x3c>)
 80042ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80042b0:	9105      	str	r1, [sp, #20]
 80042b2:	6800      	ldr	r0, [r0, #0]
 80042b4:	a902      	add	r1, sp, #8
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	f000 f98e 	bl	80045d8 <_svfiprintf_r>
 80042bc:	2200      	movs	r2, #0
 80042be:	9b02      	ldr	r3, [sp, #8]
 80042c0:	701a      	strb	r2, [r3, #0]
 80042c2:	b01c      	add	sp, #112	; 0x70
 80042c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042c8:	b003      	add	sp, #12
 80042ca:	4770      	bx	lr
 80042cc:	2000005c 	.word	0x2000005c
 80042d0:	ffff0208 	.word	0xffff0208

080042d4 <memset>:
 80042d4:	4603      	mov	r3, r0
 80042d6:	4402      	add	r2, r0
 80042d8:	4293      	cmp	r3, r2
 80042da:	d100      	bne.n	80042de <memset+0xa>
 80042dc:	4770      	bx	lr
 80042de:	f803 1b01 	strb.w	r1, [r3], #1
 80042e2:	e7f9      	b.n	80042d8 <memset+0x4>

080042e4 <__errno>:
 80042e4:	4b01      	ldr	r3, [pc, #4]	; (80042ec <__errno+0x8>)
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	2000005c 	.word	0x2000005c

080042f0 <__libc_init_array>:
 80042f0:	b570      	push	{r4, r5, r6, lr}
 80042f2:	2600      	movs	r6, #0
 80042f4:	4d0c      	ldr	r5, [pc, #48]	; (8004328 <__libc_init_array+0x38>)
 80042f6:	4c0d      	ldr	r4, [pc, #52]	; (800432c <__libc_init_array+0x3c>)
 80042f8:	1b64      	subs	r4, r4, r5
 80042fa:	10a4      	asrs	r4, r4, #2
 80042fc:	42a6      	cmp	r6, r4
 80042fe:	d109      	bne.n	8004314 <__libc_init_array+0x24>
 8004300:	f000 fc7a 	bl	8004bf8 <_init>
 8004304:	2600      	movs	r6, #0
 8004306:	4d0a      	ldr	r5, [pc, #40]	; (8004330 <__libc_init_array+0x40>)
 8004308:	4c0a      	ldr	r4, [pc, #40]	; (8004334 <__libc_init_array+0x44>)
 800430a:	1b64      	subs	r4, r4, r5
 800430c:	10a4      	asrs	r4, r4, #2
 800430e:	42a6      	cmp	r6, r4
 8004310:	d105      	bne.n	800431e <__libc_init_array+0x2e>
 8004312:	bd70      	pop	{r4, r5, r6, pc}
 8004314:	f855 3b04 	ldr.w	r3, [r5], #4
 8004318:	4798      	blx	r3
 800431a:	3601      	adds	r6, #1
 800431c:	e7ee      	b.n	80042fc <__libc_init_array+0xc>
 800431e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004322:	4798      	blx	r3
 8004324:	3601      	adds	r6, #1
 8004326:	e7f2      	b.n	800430e <__libc_init_array+0x1e>
 8004328:	08004d18 	.word	0x08004d18
 800432c:	08004d18 	.word	0x08004d18
 8004330:	08004d18 	.word	0x08004d18
 8004334:	08004d1c 	.word	0x08004d1c

08004338 <__retarget_lock_acquire_recursive>:
 8004338:	4770      	bx	lr

0800433a <__retarget_lock_release_recursive>:
 800433a:	4770      	bx	lr

0800433c <_free_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4605      	mov	r5, r0
 8004340:	2900      	cmp	r1, #0
 8004342:	d040      	beq.n	80043c6 <_free_r+0x8a>
 8004344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004348:	1f0c      	subs	r4, r1, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	bfb8      	it	lt
 800434e:	18e4      	addlt	r4, r4, r3
 8004350:	f000 f8dc 	bl	800450c <__malloc_lock>
 8004354:	4a1c      	ldr	r2, [pc, #112]	; (80043c8 <_free_r+0x8c>)
 8004356:	6813      	ldr	r3, [r2, #0]
 8004358:	b933      	cbnz	r3, 8004368 <_free_r+0x2c>
 800435a:	6063      	str	r3, [r4, #4]
 800435c:	6014      	str	r4, [r2, #0]
 800435e:	4628      	mov	r0, r5
 8004360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004364:	f000 b8d8 	b.w	8004518 <__malloc_unlock>
 8004368:	42a3      	cmp	r3, r4
 800436a:	d908      	bls.n	800437e <_free_r+0x42>
 800436c:	6820      	ldr	r0, [r4, #0]
 800436e:	1821      	adds	r1, r4, r0
 8004370:	428b      	cmp	r3, r1
 8004372:	bf01      	itttt	eq
 8004374:	6819      	ldreq	r1, [r3, #0]
 8004376:	685b      	ldreq	r3, [r3, #4]
 8004378:	1809      	addeq	r1, r1, r0
 800437a:	6021      	streq	r1, [r4, #0]
 800437c:	e7ed      	b.n	800435a <_free_r+0x1e>
 800437e:	461a      	mov	r2, r3
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	b10b      	cbz	r3, 8004388 <_free_r+0x4c>
 8004384:	42a3      	cmp	r3, r4
 8004386:	d9fa      	bls.n	800437e <_free_r+0x42>
 8004388:	6811      	ldr	r1, [r2, #0]
 800438a:	1850      	adds	r0, r2, r1
 800438c:	42a0      	cmp	r0, r4
 800438e:	d10b      	bne.n	80043a8 <_free_r+0x6c>
 8004390:	6820      	ldr	r0, [r4, #0]
 8004392:	4401      	add	r1, r0
 8004394:	1850      	adds	r0, r2, r1
 8004396:	4283      	cmp	r3, r0
 8004398:	6011      	str	r1, [r2, #0]
 800439a:	d1e0      	bne.n	800435e <_free_r+0x22>
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4408      	add	r0, r1
 80043a2:	6010      	str	r0, [r2, #0]
 80043a4:	6053      	str	r3, [r2, #4]
 80043a6:	e7da      	b.n	800435e <_free_r+0x22>
 80043a8:	d902      	bls.n	80043b0 <_free_r+0x74>
 80043aa:	230c      	movs	r3, #12
 80043ac:	602b      	str	r3, [r5, #0]
 80043ae:	e7d6      	b.n	800435e <_free_r+0x22>
 80043b0:	6820      	ldr	r0, [r4, #0]
 80043b2:	1821      	adds	r1, r4, r0
 80043b4:	428b      	cmp	r3, r1
 80043b6:	bf01      	itttt	eq
 80043b8:	6819      	ldreq	r1, [r3, #0]
 80043ba:	685b      	ldreq	r3, [r3, #4]
 80043bc:	1809      	addeq	r1, r1, r0
 80043be:	6021      	streq	r1, [r4, #0]
 80043c0:	6063      	str	r3, [r4, #4]
 80043c2:	6054      	str	r4, [r2, #4]
 80043c4:	e7cb      	b.n	800435e <_free_r+0x22>
 80043c6:	bd38      	pop	{r3, r4, r5, pc}
 80043c8:	20000348 	.word	0x20000348

080043cc <sbrk_aligned>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	4e0e      	ldr	r6, [pc, #56]	; (8004408 <sbrk_aligned+0x3c>)
 80043d0:	460c      	mov	r4, r1
 80043d2:	6831      	ldr	r1, [r6, #0]
 80043d4:	4605      	mov	r5, r0
 80043d6:	b911      	cbnz	r1, 80043de <sbrk_aligned+0x12>
 80043d8:	f000 fbaa 	bl	8004b30 <_sbrk_r>
 80043dc:	6030      	str	r0, [r6, #0]
 80043de:	4621      	mov	r1, r4
 80043e0:	4628      	mov	r0, r5
 80043e2:	f000 fba5 	bl	8004b30 <_sbrk_r>
 80043e6:	1c43      	adds	r3, r0, #1
 80043e8:	d00a      	beq.n	8004400 <sbrk_aligned+0x34>
 80043ea:	1cc4      	adds	r4, r0, #3
 80043ec:	f024 0403 	bic.w	r4, r4, #3
 80043f0:	42a0      	cmp	r0, r4
 80043f2:	d007      	beq.n	8004404 <sbrk_aligned+0x38>
 80043f4:	1a21      	subs	r1, r4, r0
 80043f6:	4628      	mov	r0, r5
 80043f8:	f000 fb9a 	bl	8004b30 <_sbrk_r>
 80043fc:	3001      	adds	r0, #1
 80043fe:	d101      	bne.n	8004404 <sbrk_aligned+0x38>
 8004400:	f04f 34ff 	mov.w	r4, #4294967295
 8004404:	4620      	mov	r0, r4
 8004406:	bd70      	pop	{r4, r5, r6, pc}
 8004408:	2000034c 	.word	0x2000034c

0800440c <_malloc_r>:
 800440c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004410:	1ccd      	adds	r5, r1, #3
 8004412:	f025 0503 	bic.w	r5, r5, #3
 8004416:	3508      	adds	r5, #8
 8004418:	2d0c      	cmp	r5, #12
 800441a:	bf38      	it	cc
 800441c:	250c      	movcc	r5, #12
 800441e:	2d00      	cmp	r5, #0
 8004420:	4607      	mov	r7, r0
 8004422:	db01      	blt.n	8004428 <_malloc_r+0x1c>
 8004424:	42a9      	cmp	r1, r5
 8004426:	d905      	bls.n	8004434 <_malloc_r+0x28>
 8004428:	230c      	movs	r3, #12
 800442a:	2600      	movs	r6, #0
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	4630      	mov	r0, r6
 8004430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004434:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004508 <_malloc_r+0xfc>
 8004438:	f000 f868 	bl	800450c <__malloc_lock>
 800443c:	f8d8 3000 	ldr.w	r3, [r8]
 8004440:	461c      	mov	r4, r3
 8004442:	bb5c      	cbnz	r4, 800449c <_malloc_r+0x90>
 8004444:	4629      	mov	r1, r5
 8004446:	4638      	mov	r0, r7
 8004448:	f7ff ffc0 	bl	80043cc <sbrk_aligned>
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	4604      	mov	r4, r0
 8004450:	d155      	bne.n	80044fe <_malloc_r+0xf2>
 8004452:	f8d8 4000 	ldr.w	r4, [r8]
 8004456:	4626      	mov	r6, r4
 8004458:	2e00      	cmp	r6, #0
 800445a:	d145      	bne.n	80044e8 <_malloc_r+0xdc>
 800445c:	2c00      	cmp	r4, #0
 800445e:	d048      	beq.n	80044f2 <_malloc_r+0xe6>
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	4631      	mov	r1, r6
 8004464:	4638      	mov	r0, r7
 8004466:	eb04 0903 	add.w	r9, r4, r3
 800446a:	f000 fb61 	bl	8004b30 <_sbrk_r>
 800446e:	4581      	cmp	r9, r0
 8004470:	d13f      	bne.n	80044f2 <_malloc_r+0xe6>
 8004472:	6821      	ldr	r1, [r4, #0]
 8004474:	4638      	mov	r0, r7
 8004476:	1a6d      	subs	r5, r5, r1
 8004478:	4629      	mov	r1, r5
 800447a:	f7ff ffa7 	bl	80043cc <sbrk_aligned>
 800447e:	3001      	adds	r0, #1
 8004480:	d037      	beq.n	80044f2 <_malloc_r+0xe6>
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	442b      	add	r3, r5
 8004486:	6023      	str	r3, [r4, #0]
 8004488:	f8d8 3000 	ldr.w	r3, [r8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d038      	beq.n	8004502 <_malloc_r+0xf6>
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	42a2      	cmp	r2, r4
 8004494:	d12b      	bne.n	80044ee <_malloc_r+0xe2>
 8004496:	2200      	movs	r2, #0
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	e00f      	b.n	80044bc <_malloc_r+0xb0>
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	1b52      	subs	r2, r2, r5
 80044a0:	d41f      	bmi.n	80044e2 <_malloc_r+0xd6>
 80044a2:	2a0b      	cmp	r2, #11
 80044a4:	d917      	bls.n	80044d6 <_malloc_r+0xca>
 80044a6:	1961      	adds	r1, r4, r5
 80044a8:	42a3      	cmp	r3, r4
 80044aa:	6025      	str	r5, [r4, #0]
 80044ac:	bf18      	it	ne
 80044ae:	6059      	strne	r1, [r3, #4]
 80044b0:	6863      	ldr	r3, [r4, #4]
 80044b2:	bf08      	it	eq
 80044b4:	f8c8 1000 	streq.w	r1, [r8]
 80044b8:	5162      	str	r2, [r4, r5]
 80044ba:	604b      	str	r3, [r1, #4]
 80044bc:	4638      	mov	r0, r7
 80044be:	f104 060b 	add.w	r6, r4, #11
 80044c2:	f000 f829 	bl	8004518 <__malloc_unlock>
 80044c6:	f026 0607 	bic.w	r6, r6, #7
 80044ca:	1d23      	adds	r3, r4, #4
 80044cc:	1af2      	subs	r2, r6, r3
 80044ce:	d0ae      	beq.n	800442e <_malloc_r+0x22>
 80044d0:	1b9b      	subs	r3, r3, r6
 80044d2:	50a3      	str	r3, [r4, r2]
 80044d4:	e7ab      	b.n	800442e <_malloc_r+0x22>
 80044d6:	42a3      	cmp	r3, r4
 80044d8:	6862      	ldr	r2, [r4, #4]
 80044da:	d1dd      	bne.n	8004498 <_malloc_r+0x8c>
 80044dc:	f8c8 2000 	str.w	r2, [r8]
 80044e0:	e7ec      	b.n	80044bc <_malloc_r+0xb0>
 80044e2:	4623      	mov	r3, r4
 80044e4:	6864      	ldr	r4, [r4, #4]
 80044e6:	e7ac      	b.n	8004442 <_malloc_r+0x36>
 80044e8:	4634      	mov	r4, r6
 80044ea:	6876      	ldr	r6, [r6, #4]
 80044ec:	e7b4      	b.n	8004458 <_malloc_r+0x4c>
 80044ee:	4613      	mov	r3, r2
 80044f0:	e7cc      	b.n	800448c <_malloc_r+0x80>
 80044f2:	230c      	movs	r3, #12
 80044f4:	4638      	mov	r0, r7
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	f000 f80e 	bl	8004518 <__malloc_unlock>
 80044fc:	e797      	b.n	800442e <_malloc_r+0x22>
 80044fe:	6025      	str	r5, [r4, #0]
 8004500:	e7dc      	b.n	80044bc <_malloc_r+0xb0>
 8004502:	605b      	str	r3, [r3, #4]
 8004504:	deff      	udf	#255	; 0xff
 8004506:	bf00      	nop
 8004508:	20000348 	.word	0x20000348

0800450c <__malloc_lock>:
 800450c:	4801      	ldr	r0, [pc, #4]	; (8004514 <__malloc_lock+0x8>)
 800450e:	f7ff bf13 	b.w	8004338 <__retarget_lock_acquire_recursive>
 8004512:	bf00      	nop
 8004514:	20000344 	.word	0x20000344

08004518 <__malloc_unlock>:
 8004518:	4801      	ldr	r0, [pc, #4]	; (8004520 <__malloc_unlock+0x8>)
 800451a:	f7ff bf0e 	b.w	800433a <__retarget_lock_release_recursive>
 800451e:	bf00      	nop
 8004520:	20000344 	.word	0x20000344

08004524 <__ssputs_r>:
 8004524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	461f      	mov	r7, r3
 800452a:	688e      	ldr	r6, [r1, #8]
 800452c:	4682      	mov	sl, r0
 800452e:	42be      	cmp	r6, r7
 8004530:	460c      	mov	r4, r1
 8004532:	4690      	mov	r8, r2
 8004534:	680b      	ldr	r3, [r1, #0]
 8004536:	d82c      	bhi.n	8004592 <__ssputs_r+0x6e>
 8004538:	898a      	ldrh	r2, [r1, #12]
 800453a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800453e:	d026      	beq.n	800458e <__ssputs_r+0x6a>
 8004540:	6965      	ldr	r5, [r4, #20]
 8004542:	6909      	ldr	r1, [r1, #16]
 8004544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004548:	eba3 0901 	sub.w	r9, r3, r1
 800454c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004550:	1c7b      	adds	r3, r7, #1
 8004552:	444b      	add	r3, r9
 8004554:	106d      	asrs	r5, r5, #1
 8004556:	429d      	cmp	r5, r3
 8004558:	bf38      	it	cc
 800455a:	461d      	movcc	r5, r3
 800455c:	0553      	lsls	r3, r2, #21
 800455e:	d527      	bpl.n	80045b0 <__ssputs_r+0x8c>
 8004560:	4629      	mov	r1, r5
 8004562:	f7ff ff53 	bl	800440c <_malloc_r>
 8004566:	4606      	mov	r6, r0
 8004568:	b360      	cbz	r0, 80045c4 <__ssputs_r+0xa0>
 800456a:	464a      	mov	r2, r9
 800456c:	6921      	ldr	r1, [r4, #16]
 800456e:	f000 fafd 	bl	8004b6c <memcpy>
 8004572:	89a3      	ldrh	r3, [r4, #12]
 8004574:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800457c:	81a3      	strh	r3, [r4, #12]
 800457e:	6126      	str	r6, [r4, #16]
 8004580:	444e      	add	r6, r9
 8004582:	6026      	str	r6, [r4, #0]
 8004584:	463e      	mov	r6, r7
 8004586:	6165      	str	r5, [r4, #20]
 8004588:	eba5 0509 	sub.w	r5, r5, r9
 800458c:	60a5      	str	r5, [r4, #8]
 800458e:	42be      	cmp	r6, r7
 8004590:	d900      	bls.n	8004594 <__ssputs_r+0x70>
 8004592:	463e      	mov	r6, r7
 8004594:	4632      	mov	r2, r6
 8004596:	4641      	mov	r1, r8
 8004598:	6820      	ldr	r0, [r4, #0]
 800459a:	f000 faaf 	bl	8004afc <memmove>
 800459e:	2000      	movs	r0, #0
 80045a0:	68a3      	ldr	r3, [r4, #8]
 80045a2:	1b9b      	subs	r3, r3, r6
 80045a4:	60a3      	str	r3, [r4, #8]
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	4433      	add	r3, r6
 80045aa:	6023      	str	r3, [r4, #0]
 80045ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b0:	462a      	mov	r2, r5
 80045b2:	f000 fae9 	bl	8004b88 <_realloc_r>
 80045b6:	4606      	mov	r6, r0
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d1e0      	bne.n	800457e <__ssputs_r+0x5a>
 80045bc:	4650      	mov	r0, sl
 80045be:	6921      	ldr	r1, [r4, #16]
 80045c0:	f7ff febc 	bl	800433c <_free_r>
 80045c4:	230c      	movs	r3, #12
 80045c6:	f8ca 3000 	str.w	r3, [sl]
 80045ca:	89a3      	ldrh	r3, [r4, #12]
 80045cc:	f04f 30ff 	mov.w	r0, #4294967295
 80045d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045d4:	81a3      	strh	r3, [r4, #12]
 80045d6:	e7e9      	b.n	80045ac <__ssputs_r+0x88>

080045d8 <_svfiprintf_r>:
 80045d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045dc:	4698      	mov	r8, r3
 80045de:	898b      	ldrh	r3, [r1, #12]
 80045e0:	4607      	mov	r7, r0
 80045e2:	061b      	lsls	r3, r3, #24
 80045e4:	460d      	mov	r5, r1
 80045e6:	4614      	mov	r4, r2
 80045e8:	b09d      	sub	sp, #116	; 0x74
 80045ea:	d50e      	bpl.n	800460a <_svfiprintf_r+0x32>
 80045ec:	690b      	ldr	r3, [r1, #16]
 80045ee:	b963      	cbnz	r3, 800460a <_svfiprintf_r+0x32>
 80045f0:	2140      	movs	r1, #64	; 0x40
 80045f2:	f7ff ff0b 	bl	800440c <_malloc_r>
 80045f6:	6028      	str	r0, [r5, #0]
 80045f8:	6128      	str	r0, [r5, #16]
 80045fa:	b920      	cbnz	r0, 8004606 <_svfiprintf_r+0x2e>
 80045fc:	230c      	movs	r3, #12
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	e0d0      	b.n	80047a8 <_svfiprintf_r+0x1d0>
 8004606:	2340      	movs	r3, #64	; 0x40
 8004608:	616b      	str	r3, [r5, #20]
 800460a:	2300      	movs	r3, #0
 800460c:	9309      	str	r3, [sp, #36]	; 0x24
 800460e:	2320      	movs	r3, #32
 8004610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004614:	2330      	movs	r3, #48	; 0x30
 8004616:	f04f 0901 	mov.w	r9, #1
 800461a:	f8cd 800c 	str.w	r8, [sp, #12]
 800461e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80047c0 <_svfiprintf_r+0x1e8>
 8004622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004626:	4623      	mov	r3, r4
 8004628:	469a      	mov	sl, r3
 800462a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800462e:	b10a      	cbz	r2, 8004634 <_svfiprintf_r+0x5c>
 8004630:	2a25      	cmp	r2, #37	; 0x25
 8004632:	d1f9      	bne.n	8004628 <_svfiprintf_r+0x50>
 8004634:	ebba 0b04 	subs.w	fp, sl, r4
 8004638:	d00b      	beq.n	8004652 <_svfiprintf_r+0x7a>
 800463a:	465b      	mov	r3, fp
 800463c:	4622      	mov	r2, r4
 800463e:	4629      	mov	r1, r5
 8004640:	4638      	mov	r0, r7
 8004642:	f7ff ff6f 	bl	8004524 <__ssputs_r>
 8004646:	3001      	adds	r0, #1
 8004648:	f000 80a9 	beq.w	800479e <_svfiprintf_r+0x1c6>
 800464c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800464e:	445a      	add	r2, fp
 8004650:	9209      	str	r2, [sp, #36]	; 0x24
 8004652:	f89a 3000 	ldrb.w	r3, [sl]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80a1 	beq.w	800479e <_svfiprintf_r+0x1c6>
 800465c:	2300      	movs	r3, #0
 800465e:	f04f 32ff 	mov.w	r2, #4294967295
 8004662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004666:	f10a 0a01 	add.w	sl, sl, #1
 800466a:	9304      	str	r3, [sp, #16]
 800466c:	9307      	str	r3, [sp, #28]
 800466e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004672:	931a      	str	r3, [sp, #104]	; 0x68
 8004674:	4654      	mov	r4, sl
 8004676:	2205      	movs	r2, #5
 8004678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800467c:	4850      	ldr	r0, [pc, #320]	; (80047c0 <_svfiprintf_r+0x1e8>)
 800467e:	f000 fa67 	bl	8004b50 <memchr>
 8004682:	9a04      	ldr	r2, [sp, #16]
 8004684:	b9d8      	cbnz	r0, 80046be <_svfiprintf_r+0xe6>
 8004686:	06d0      	lsls	r0, r2, #27
 8004688:	bf44      	itt	mi
 800468a:	2320      	movmi	r3, #32
 800468c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004690:	0711      	lsls	r1, r2, #28
 8004692:	bf44      	itt	mi
 8004694:	232b      	movmi	r3, #43	; 0x2b
 8004696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800469a:	f89a 3000 	ldrb.w	r3, [sl]
 800469e:	2b2a      	cmp	r3, #42	; 0x2a
 80046a0:	d015      	beq.n	80046ce <_svfiprintf_r+0xf6>
 80046a2:	4654      	mov	r4, sl
 80046a4:	2000      	movs	r0, #0
 80046a6:	f04f 0c0a 	mov.w	ip, #10
 80046aa:	9a07      	ldr	r2, [sp, #28]
 80046ac:	4621      	mov	r1, r4
 80046ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046b2:	3b30      	subs	r3, #48	; 0x30
 80046b4:	2b09      	cmp	r3, #9
 80046b6:	d94d      	bls.n	8004754 <_svfiprintf_r+0x17c>
 80046b8:	b1b0      	cbz	r0, 80046e8 <_svfiprintf_r+0x110>
 80046ba:	9207      	str	r2, [sp, #28]
 80046bc:	e014      	b.n	80046e8 <_svfiprintf_r+0x110>
 80046be:	eba0 0308 	sub.w	r3, r0, r8
 80046c2:	fa09 f303 	lsl.w	r3, r9, r3
 80046c6:	4313      	orrs	r3, r2
 80046c8:	46a2      	mov	sl, r4
 80046ca:	9304      	str	r3, [sp, #16]
 80046cc:	e7d2      	b.n	8004674 <_svfiprintf_r+0x9c>
 80046ce:	9b03      	ldr	r3, [sp, #12]
 80046d0:	1d19      	adds	r1, r3, #4
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	9103      	str	r1, [sp, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	bfbb      	ittet	lt
 80046da:	425b      	neglt	r3, r3
 80046dc:	f042 0202 	orrlt.w	r2, r2, #2
 80046e0:	9307      	strge	r3, [sp, #28]
 80046e2:	9307      	strlt	r3, [sp, #28]
 80046e4:	bfb8      	it	lt
 80046e6:	9204      	strlt	r2, [sp, #16]
 80046e8:	7823      	ldrb	r3, [r4, #0]
 80046ea:	2b2e      	cmp	r3, #46	; 0x2e
 80046ec:	d10c      	bne.n	8004708 <_svfiprintf_r+0x130>
 80046ee:	7863      	ldrb	r3, [r4, #1]
 80046f0:	2b2a      	cmp	r3, #42	; 0x2a
 80046f2:	d134      	bne.n	800475e <_svfiprintf_r+0x186>
 80046f4:	9b03      	ldr	r3, [sp, #12]
 80046f6:	3402      	adds	r4, #2
 80046f8:	1d1a      	adds	r2, r3, #4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	9203      	str	r2, [sp, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bfb8      	it	lt
 8004702:	f04f 33ff 	movlt.w	r3, #4294967295
 8004706:	9305      	str	r3, [sp, #20]
 8004708:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80047c4 <_svfiprintf_r+0x1ec>
 800470c:	2203      	movs	r2, #3
 800470e:	4650      	mov	r0, sl
 8004710:	7821      	ldrb	r1, [r4, #0]
 8004712:	f000 fa1d 	bl	8004b50 <memchr>
 8004716:	b138      	cbz	r0, 8004728 <_svfiprintf_r+0x150>
 8004718:	2240      	movs	r2, #64	; 0x40
 800471a:	9b04      	ldr	r3, [sp, #16]
 800471c:	eba0 000a 	sub.w	r0, r0, sl
 8004720:	4082      	lsls	r2, r0
 8004722:	4313      	orrs	r3, r2
 8004724:	3401      	adds	r4, #1
 8004726:	9304      	str	r3, [sp, #16]
 8004728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800472c:	2206      	movs	r2, #6
 800472e:	4826      	ldr	r0, [pc, #152]	; (80047c8 <_svfiprintf_r+0x1f0>)
 8004730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004734:	f000 fa0c 	bl	8004b50 <memchr>
 8004738:	2800      	cmp	r0, #0
 800473a:	d038      	beq.n	80047ae <_svfiprintf_r+0x1d6>
 800473c:	4b23      	ldr	r3, [pc, #140]	; (80047cc <_svfiprintf_r+0x1f4>)
 800473e:	bb1b      	cbnz	r3, 8004788 <_svfiprintf_r+0x1b0>
 8004740:	9b03      	ldr	r3, [sp, #12]
 8004742:	3307      	adds	r3, #7
 8004744:	f023 0307 	bic.w	r3, r3, #7
 8004748:	3308      	adds	r3, #8
 800474a:	9303      	str	r3, [sp, #12]
 800474c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800474e:	4433      	add	r3, r6
 8004750:	9309      	str	r3, [sp, #36]	; 0x24
 8004752:	e768      	b.n	8004626 <_svfiprintf_r+0x4e>
 8004754:	460c      	mov	r4, r1
 8004756:	2001      	movs	r0, #1
 8004758:	fb0c 3202 	mla	r2, ip, r2, r3
 800475c:	e7a6      	b.n	80046ac <_svfiprintf_r+0xd4>
 800475e:	2300      	movs	r3, #0
 8004760:	f04f 0c0a 	mov.w	ip, #10
 8004764:	4619      	mov	r1, r3
 8004766:	3401      	adds	r4, #1
 8004768:	9305      	str	r3, [sp, #20]
 800476a:	4620      	mov	r0, r4
 800476c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004770:	3a30      	subs	r2, #48	; 0x30
 8004772:	2a09      	cmp	r2, #9
 8004774:	d903      	bls.n	800477e <_svfiprintf_r+0x1a6>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0c6      	beq.n	8004708 <_svfiprintf_r+0x130>
 800477a:	9105      	str	r1, [sp, #20]
 800477c:	e7c4      	b.n	8004708 <_svfiprintf_r+0x130>
 800477e:	4604      	mov	r4, r0
 8004780:	2301      	movs	r3, #1
 8004782:	fb0c 2101 	mla	r1, ip, r1, r2
 8004786:	e7f0      	b.n	800476a <_svfiprintf_r+0x192>
 8004788:	ab03      	add	r3, sp, #12
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	462a      	mov	r2, r5
 800478e:	4638      	mov	r0, r7
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <_svfiprintf_r+0x1f8>)
 8004792:	a904      	add	r1, sp, #16
 8004794:	f3af 8000 	nop.w
 8004798:	1c42      	adds	r2, r0, #1
 800479a:	4606      	mov	r6, r0
 800479c:	d1d6      	bne.n	800474c <_svfiprintf_r+0x174>
 800479e:	89ab      	ldrh	r3, [r5, #12]
 80047a0:	065b      	lsls	r3, r3, #25
 80047a2:	f53f af2d 	bmi.w	8004600 <_svfiprintf_r+0x28>
 80047a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047a8:	b01d      	add	sp, #116	; 0x74
 80047aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ae:	ab03      	add	r3, sp, #12
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	462a      	mov	r2, r5
 80047b4:	4638      	mov	r0, r7
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <_svfiprintf_r+0x1f8>)
 80047b8:	a904      	add	r1, sp, #16
 80047ba:	f000 f87d 	bl	80048b8 <_printf_i>
 80047be:	e7eb      	b.n	8004798 <_svfiprintf_r+0x1c0>
 80047c0:	08004ce2 	.word	0x08004ce2
 80047c4:	08004ce8 	.word	0x08004ce8
 80047c8:	08004cec 	.word	0x08004cec
 80047cc:	00000000 	.word	0x00000000
 80047d0:	08004525 	.word	0x08004525

080047d4 <_printf_common>:
 80047d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d8:	4616      	mov	r6, r2
 80047da:	4699      	mov	r9, r3
 80047dc:	688a      	ldr	r2, [r1, #8]
 80047de:	690b      	ldr	r3, [r1, #16]
 80047e0:	4607      	mov	r7, r0
 80047e2:	4293      	cmp	r3, r2
 80047e4:	bfb8      	it	lt
 80047e6:	4613      	movlt	r3, r2
 80047e8:	6033      	str	r3, [r6, #0]
 80047ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047ee:	460c      	mov	r4, r1
 80047f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047f4:	b10a      	cbz	r2, 80047fa <_printf_common+0x26>
 80047f6:	3301      	adds	r3, #1
 80047f8:	6033      	str	r3, [r6, #0]
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	0699      	lsls	r1, r3, #26
 80047fe:	bf42      	ittt	mi
 8004800:	6833      	ldrmi	r3, [r6, #0]
 8004802:	3302      	addmi	r3, #2
 8004804:	6033      	strmi	r3, [r6, #0]
 8004806:	6825      	ldr	r5, [r4, #0]
 8004808:	f015 0506 	ands.w	r5, r5, #6
 800480c:	d106      	bne.n	800481c <_printf_common+0x48>
 800480e:	f104 0a19 	add.w	sl, r4, #25
 8004812:	68e3      	ldr	r3, [r4, #12]
 8004814:	6832      	ldr	r2, [r6, #0]
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	42ab      	cmp	r3, r5
 800481a:	dc2b      	bgt.n	8004874 <_printf_common+0xa0>
 800481c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004820:	1e13      	subs	r3, r2, #0
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	bf18      	it	ne
 8004826:	2301      	movne	r3, #1
 8004828:	0692      	lsls	r2, r2, #26
 800482a:	d430      	bmi.n	800488e <_printf_common+0xba>
 800482c:	4649      	mov	r1, r9
 800482e:	4638      	mov	r0, r7
 8004830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004834:	47c0      	blx	r8
 8004836:	3001      	adds	r0, #1
 8004838:	d023      	beq.n	8004882 <_printf_common+0xae>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	6922      	ldr	r2, [r4, #16]
 800483e:	f003 0306 	and.w	r3, r3, #6
 8004842:	2b04      	cmp	r3, #4
 8004844:	bf14      	ite	ne
 8004846:	2500      	movne	r5, #0
 8004848:	6833      	ldreq	r3, [r6, #0]
 800484a:	f04f 0600 	mov.w	r6, #0
 800484e:	bf08      	it	eq
 8004850:	68e5      	ldreq	r5, [r4, #12]
 8004852:	f104 041a 	add.w	r4, r4, #26
 8004856:	bf08      	it	eq
 8004858:	1aed      	subeq	r5, r5, r3
 800485a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800485e:	bf08      	it	eq
 8004860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004864:	4293      	cmp	r3, r2
 8004866:	bfc4      	itt	gt
 8004868:	1a9b      	subgt	r3, r3, r2
 800486a:	18ed      	addgt	r5, r5, r3
 800486c:	42b5      	cmp	r5, r6
 800486e:	d11a      	bne.n	80048a6 <_printf_common+0xd2>
 8004870:	2000      	movs	r0, #0
 8004872:	e008      	b.n	8004886 <_printf_common+0xb2>
 8004874:	2301      	movs	r3, #1
 8004876:	4652      	mov	r2, sl
 8004878:	4649      	mov	r1, r9
 800487a:	4638      	mov	r0, r7
 800487c:	47c0      	blx	r8
 800487e:	3001      	adds	r0, #1
 8004880:	d103      	bne.n	800488a <_printf_common+0xb6>
 8004882:	f04f 30ff 	mov.w	r0, #4294967295
 8004886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800488a:	3501      	adds	r5, #1
 800488c:	e7c1      	b.n	8004812 <_printf_common+0x3e>
 800488e:	2030      	movs	r0, #48	; 0x30
 8004890:	18e1      	adds	r1, r4, r3
 8004892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800489c:	4422      	add	r2, r4
 800489e:	3302      	adds	r3, #2
 80048a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048a4:	e7c2      	b.n	800482c <_printf_common+0x58>
 80048a6:	2301      	movs	r3, #1
 80048a8:	4622      	mov	r2, r4
 80048aa:	4649      	mov	r1, r9
 80048ac:	4638      	mov	r0, r7
 80048ae:	47c0      	blx	r8
 80048b0:	3001      	adds	r0, #1
 80048b2:	d0e6      	beq.n	8004882 <_printf_common+0xae>
 80048b4:	3601      	adds	r6, #1
 80048b6:	e7d9      	b.n	800486c <_printf_common+0x98>

080048b8 <_printf_i>:
 80048b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048bc:	7e0f      	ldrb	r7, [r1, #24]
 80048be:	4691      	mov	r9, r2
 80048c0:	2f78      	cmp	r7, #120	; 0x78
 80048c2:	4680      	mov	r8, r0
 80048c4:	460c      	mov	r4, r1
 80048c6:	469a      	mov	sl, r3
 80048c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048ce:	d807      	bhi.n	80048e0 <_printf_i+0x28>
 80048d0:	2f62      	cmp	r7, #98	; 0x62
 80048d2:	d80a      	bhi.n	80048ea <_printf_i+0x32>
 80048d4:	2f00      	cmp	r7, #0
 80048d6:	f000 80d5 	beq.w	8004a84 <_printf_i+0x1cc>
 80048da:	2f58      	cmp	r7, #88	; 0x58
 80048dc:	f000 80c1 	beq.w	8004a62 <_printf_i+0x1aa>
 80048e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048e8:	e03a      	b.n	8004960 <_printf_i+0xa8>
 80048ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048ee:	2b15      	cmp	r3, #21
 80048f0:	d8f6      	bhi.n	80048e0 <_printf_i+0x28>
 80048f2:	a101      	add	r1, pc, #4	; (adr r1, 80048f8 <_printf_i+0x40>)
 80048f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048f8:	08004951 	.word	0x08004951
 80048fc:	08004965 	.word	0x08004965
 8004900:	080048e1 	.word	0x080048e1
 8004904:	080048e1 	.word	0x080048e1
 8004908:	080048e1 	.word	0x080048e1
 800490c:	080048e1 	.word	0x080048e1
 8004910:	08004965 	.word	0x08004965
 8004914:	080048e1 	.word	0x080048e1
 8004918:	080048e1 	.word	0x080048e1
 800491c:	080048e1 	.word	0x080048e1
 8004920:	080048e1 	.word	0x080048e1
 8004924:	08004a6b 	.word	0x08004a6b
 8004928:	08004991 	.word	0x08004991
 800492c:	08004a25 	.word	0x08004a25
 8004930:	080048e1 	.word	0x080048e1
 8004934:	080048e1 	.word	0x080048e1
 8004938:	08004a8d 	.word	0x08004a8d
 800493c:	080048e1 	.word	0x080048e1
 8004940:	08004991 	.word	0x08004991
 8004944:	080048e1 	.word	0x080048e1
 8004948:	080048e1 	.word	0x080048e1
 800494c:	08004a2d 	.word	0x08004a2d
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	1d1a      	adds	r2, r3, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	602a      	str	r2, [r5, #0]
 8004958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800495c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004960:	2301      	movs	r3, #1
 8004962:	e0a0      	b.n	8004aa6 <_printf_i+0x1ee>
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	682b      	ldr	r3, [r5, #0]
 8004968:	0607      	lsls	r7, r0, #24
 800496a:	f103 0104 	add.w	r1, r3, #4
 800496e:	6029      	str	r1, [r5, #0]
 8004970:	d501      	bpl.n	8004976 <_printf_i+0xbe>
 8004972:	681e      	ldr	r6, [r3, #0]
 8004974:	e003      	b.n	800497e <_printf_i+0xc6>
 8004976:	0646      	lsls	r6, r0, #25
 8004978:	d5fb      	bpl.n	8004972 <_printf_i+0xba>
 800497a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800497e:	2e00      	cmp	r6, #0
 8004980:	da03      	bge.n	800498a <_printf_i+0xd2>
 8004982:	232d      	movs	r3, #45	; 0x2d
 8004984:	4276      	negs	r6, r6
 8004986:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800498a:	230a      	movs	r3, #10
 800498c:	4859      	ldr	r0, [pc, #356]	; (8004af4 <_printf_i+0x23c>)
 800498e:	e012      	b.n	80049b6 <_printf_i+0xfe>
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	6820      	ldr	r0, [r4, #0]
 8004994:	1d19      	adds	r1, r3, #4
 8004996:	6029      	str	r1, [r5, #0]
 8004998:	0605      	lsls	r5, r0, #24
 800499a:	d501      	bpl.n	80049a0 <_printf_i+0xe8>
 800499c:	681e      	ldr	r6, [r3, #0]
 800499e:	e002      	b.n	80049a6 <_printf_i+0xee>
 80049a0:	0641      	lsls	r1, r0, #25
 80049a2:	d5fb      	bpl.n	800499c <_printf_i+0xe4>
 80049a4:	881e      	ldrh	r6, [r3, #0]
 80049a6:	2f6f      	cmp	r7, #111	; 0x6f
 80049a8:	bf0c      	ite	eq
 80049aa:	2308      	moveq	r3, #8
 80049ac:	230a      	movne	r3, #10
 80049ae:	4851      	ldr	r0, [pc, #324]	; (8004af4 <_printf_i+0x23c>)
 80049b0:	2100      	movs	r1, #0
 80049b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049b6:	6865      	ldr	r5, [r4, #4]
 80049b8:	2d00      	cmp	r5, #0
 80049ba:	bfa8      	it	ge
 80049bc:	6821      	ldrge	r1, [r4, #0]
 80049be:	60a5      	str	r5, [r4, #8]
 80049c0:	bfa4      	itt	ge
 80049c2:	f021 0104 	bicge.w	r1, r1, #4
 80049c6:	6021      	strge	r1, [r4, #0]
 80049c8:	b90e      	cbnz	r6, 80049ce <_printf_i+0x116>
 80049ca:	2d00      	cmp	r5, #0
 80049cc:	d04b      	beq.n	8004a66 <_printf_i+0x1ae>
 80049ce:	4615      	mov	r5, r2
 80049d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80049d4:	fb03 6711 	mls	r7, r3, r1, r6
 80049d8:	5dc7      	ldrb	r7, [r0, r7]
 80049da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049de:	4637      	mov	r7, r6
 80049e0:	42bb      	cmp	r3, r7
 80049e2:	460e      	mov	r6, r1
 80049e4:	d9f4      	bls.n	80049d0 <_printf_i+0x118>
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d10b      	bne.n	8004a02 <_printf_i+0x14a>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	07de      	lsls	r6, r3, #31
 80049ee:	d508      	bpl.n	8004a02 <_printf_i+0x14a>
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	6861      	ldr	r1, [r4, #4]
 80049f4:	4299      	cmp	r1, r3
 80049f6:	bfde      	ittt	le
 80049f8:	2330      	movle	r3, #48	; 0x30
 80049fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a02:	1b52      	subs	r2, r2, r5
 8004a04:	6122      	str	r2, [r4, #16]
 8004a06:	464b      	mov	r3, r9
 8004a08:	4621      	mov	r1, r4
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	f8cd a000 	str.w	sl, [sp]
 8004a10:	aa03      	add	r2, sp, #12
 8004a12:	f7ff fedf 	bl	80047d4 <_printf_common>
 8004a16:	3001      	adds	r0, #1
 8004a18:	d14a      	bne.n	8004ab0 <_printf_i+0x1f8>
 8004a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1e:	b004      	add	sp, #16
 8004a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	f043 0320 	orr.w	r3, r3, #32
 8004a2a:	6023      	str	r3, [r4, #0]
 8004a2c:	2778      	movs	r7, #120	; 0x78
 8004a2e:	4832      	ldr	r0, [pc, #200]	; (8004af8 <_printf_i+0x240>)
 8004a30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	6829      	ldr	r1, [r5, #0]
 8004a38:	061f      	lsls	r7, r3, #24
 8004a3a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a3e:	d402      	bmi.n	8004a46 <_printf_i+0x18e>
 8004a40:	065f      	lsls	r7, r3, #25
 8004a42:	bf48      	it	mi
 8004a44:	b2b6      	uxthmi	r6, r6
 8004a46:	07df      	lsls	r7, r3, #31
 8004a48:	bf48      	it	mi
 8004a4a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a4e:	6029      	str	r1, [r5, #0]
 8004a50:	bf48      	it	mi
 8004a52:	6023      	strmi	r3, [r4, #0]
 8004a54:	b91e      	cbnz	r6, 8004a5e <_printf_i+0x1a6>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	f023 0320 	bic.w	r3, r3, #32
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	2310      	movs	r3, #16
 8004a60:	e7a6      	b.n	80049b0 <_printf_i+0xf8>
 8004a62:	4824      	ldr	r0, [pc, #144]	; (8004af4 <_printf_i+0x23c>)
 8004a64:	e7e4      	b.n	8004a30 <_printf_i+0x178>
 8004a66:	4615      	mov	r5, r2
 8004a68:	e7bd      	b.n	80049e6 <_printf_i+0x12e>
 8004a6a:	682b      	ldr	r3, [r5, #0]
 8004a6c:	6826      	ldr	r6, [r4, #0]
 8004a6e:	1d18      	adds	r0, r3, #4
 8004a70:	6961      	ldr	r1, [r4, #20]
 8004a72:	6028      	str	r0, [r5, #0]
 8004a74:	0635      	lsls	r5, r6, #24
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	d501      	bpl.n	8004a7e <_printf_i+0x1c6>
 8004a7a:	6019      	str	r1, [r3, #0]
 8004a7c:	e002      	b.n	8004a84 <_printf_i+0x1cc>
 8004a7e:	0670      	lsls	r0, r6, #25
 8004a80:	d5fb      	bpl.n	8004a7a <_printf_i+0x1c2>
 8004a82:	8019      	strh	r1, [r3, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	4615      	mov	r5, r2
 8004a88:	6123      	str	r3, [r4, #16]
 8004a8a:	e7bc      	b.n	8004a06 <_printf_i+0x14e>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	2100      	movs	r1, #0
 8004a90:	1d1a      	adds	r2, r3, #4
 8004a92:	602a      	str	r2, [r5, #0]
 8004a94:	681d      	ldr	r5, [r3, #0]
 8004a96:	6862      	ldr	r2, [r4, #4]
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f000 f859 	bl	8004b50 <memchr>
 8004a9e:	b108      	cbz	r0, 8004aa4 <_printf_i+0x1ec>
 8004aa0:	1b40      	subs	r0, r0, r5
 8004aa2:	6060      	str	r0, [r4, #4]
 8004aa4:	6863      	ldr	r3, [r4, #4]
 8004aa6:	6123      	str	r3, [r4, #16]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aae:	e7aa      	b.n	8004a06 <_printf_i+0x14e>
 8004ab0:	462a      	mov	r2, r5
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	4640      	mov	r0, r8
 8004ab6:	6923      	ldr	r3, [r4, #16]
 8004ab8:	47d0      	blx	sl
 8004aba:	3001      	adds	r0, #1
 8004abc:	d0ad      	beq.n	8004a1a <_printf_i+0x162>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	079b      	lsls	r3, r3, #30
 8004ac2:	d413      	bmi.n	8004aec <_printf_i+0x234>
 8004ac4:	68e0      	ldr	r0, [r4, #12]
 8004ac6:	9b03      	ldr	r3, [sp, #12]
 8004ac8:	4298      	cmp	r0, r3
 8004aca:	bfb8      	it	lt
 8004acc:	4618      	movlt	r0, r3
 8004ace:	e7a6      	b.n	8004a1e <_printf_i+0x166>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	4632      	mov	r2, r6
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	47d0      	blx	sl
 8004ada:	3001      	adds	r0, #1
 8004adc:	d09d      	beq.n	8004a1a <_printf_i+0x162>
 8004ade:	3501      	adds	r5, #1
 8004ae0:	68e3      	ldr	r3, [r4, #12]
 8004ae2:	9903      	ldr	r1, [sp, #12]
 8004ae4:	1a5b      	subs	r3, r3, r1
 8004ae6:	42ab      	cmp	r3, r5
 8004ae8:	dcf2      	bgt.n	8004ad0 <_printf_i+0x218>
 8004aea:	e7eb      	b.n	8004ac4 <_printf_i+0x20c>
 8004aec:	2500      	movs	r5, #0
 8004aee:	f104 0619 	add.w	r6, r4, #25
 8004af2:	e7f5      	b.n	8004ae0 <_printf_i+0x228>
 8004af4:	08004cf3 	.word	0x08004cf3
 8004af8:	08004d04 	.word	0x08004d04

08004afc <memmove>:
 8004afc:	4288      	cmp	r0, r1
 8004afe:	b510      	push	{r4, lr}
 8004b00:	eb01 0402 	add.w	r4, r1, r2
 8004b04:	d902      	bls.n	8004b0c <memmove+0x10>
 8004b06:	4284      	cmp	r4, r0
 8004b08:	4623      	mov	r3, r4
 8004b0a:	d807      	bhi.n	8004b1c <memmove+0x20>
 8004b0c:	1e43      	subs	r3, r0, #1
 8004b0e:	42a1      	cmp	r1, r4
 8004b10:	d008      	beq.n	8004b24 <memmove+0x28>
 8004b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b1a:	e7f8      	b.n	8004b0e <memmove+0x12>
 8004b1c:	4601      	mov	r1, r0
 8004b1e:	4402      	add	r2, r0
 8004b20:	428a      	cmp	r2, r1
 8004b22:	d100      	bne.n	8004b26 <memmove+0x2a>
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b2e:	e7f7      	b.n	8004b20 <memmove+0x24>

08004b30 <_sbrk_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	2300      	movs	r3, #0
 8004b34:	4d05      	ldr	r5, [pc, #20]	; (8004b4c <_sbrk_r+0x1c>)
 8004b36:	4604      	mov	r4, r0
 8004b38:	4608      	mov	r0, r1
 8004b3a:	602b      	str	r3, [r5, #0]
 8004b3c:	f7fd f9da 	bl	8001ef4 <_sbrk>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	d102      	bne.n	8004b4a <_sbrk_r+0x1a>
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	b103      	cbz	r3, 8004b4a <_sbrk_r+0x1a>
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
 8004b4c:	20000340 	.word	0x20000340

08004b50 <memchr>:
 8004b50:	4603      	mov	r3, r0
 8004b52:	b510      	push	{r4, lr}
 8004b54:	b2c9      	uxtb	r1, r1
 8004b56:	4402      	add	r2, r0
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	d101      	bne.n	8004b62 <memchr+0x12>
 8004b5e:	2000      	movs	r0, #0
 8004b60:	e003      	b.n	8004b6a <memchr+0x1a>
 8004b62:	7804      	ldrb	r4, [r0, #0]
 8004b64:	3301      	adds	r3, #1
 8004b66:	428c      	cmp	r4, r1
 8004b68:	d1f6      	bne.n	8004b58 <memchr+0x8>
 8004b6a:	bd10      	pop	{r4, pc}

08004b6c <memcpy>:
 8004b6c:	440a      	add	r2, r1
 8004b6e:	4291      	cmp	r1, r2
 8004b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b74:	d100      	bne.n	8004b78 <memcpy+0xc>
 8004b76:	4770      	bx	lr
 8004b78:	b510      	push	{r4, lr}
 8004b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b7e:	4291      	cmp	r1, r2
 8004b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b84:	d1f9      	bne.n	8004b7a <memcpy+0xe>
 8004b86:	bd10      	pop	{r4, pc}

08004b88 <_realloc_r>:
 8004b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b8c:	4680      	mov	r8, r0
 8004b8e:	4614      	mov	r4, r2
 8004b90:	460e      	mov	r6, r1
 8004b92:	b921      	cbnz	r1, 8004b9e <_realloc_r+0x16>
 8004b94:	4611      	mov	r1, r2
 8004b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b9a:	f7ff bc37 	b.w	800440c <_malloc_r>
 8004b9e:	b92a      	cbnz	r2, 8004bac <_realloc_r+0x24>
 8004ba0:	f7ff fbcc 	bl	800433c <_free_r>
 8004ba4:	4625      	mov	r5, r4
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bac:	f000 f81b 	bl	8004be6 <_malloc_usable_size_r>
 8004bb0:	4284      	cmp	r4, r0
 8004bb2:	4607      	mov	r7, r0
 8004bb4:	d802      	bhi.n	8004bbc <_realloc_r+0x34>
 8004bb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004bba:	d812      	bhi.n	8004be2 <_realloc_r+0x5a>
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	4640      	mov	r0, r8
 8004bc0:	f7ff fc24 	bl	800440c <_malloc_r>
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d0ed      	beq.n	8004ba6 <_realloc_r+0x1e>
 8004bca:	42bc      	cmp	r4, r7
 8004bcc:	4622      	mov	r2, r4
 8004bce:	4631      	mov	r1, r6
 8004bd0:	bf28      	it	cs
 8004bd2:	463a      	movcs	r2, r7
 8004bd4:	f7ff ffca 	bl	8004b6c <memcpy>
 8004bd8:	4631      	mov	r1, r6
 8004bda:	4640      	mov	r0, r8
 8004bdc:	f7ff fbae 	bl	800433c <_free_r>
 8004be0:	e7e1      	b.n	8004ba6 <_realloc_r+0x1e>
 8004be2:	4635      	mov	r5, r6
 8004be4:	e7df      	b.n	8004ba6 <_realloc_r+0x1e>

08004be6 <_malloc_usable_size_r>:
 8004be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bea:	1f18      	subs	r0, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bfbc      	itt	lt
 8004bf0:	580b      	ldrlt	r3, [r1, r0]
 8004bf2:	18c0      	addlt	r0, r0, r3
 8004bf4:	4770      	bx	lr
	...

08004bf8 <_init>:
 8004bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfa:	bf00      	nop
 8004bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfe:	bc08      	pop	{r3}
 8004c00:	469e      	mov	lr, r3
 8004c02:	4770      	bx	lr

08004c04 <_fini>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	bf00      	nop
 8004c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0a:	bc08      	pop	{r3}
 8004c0c:	469e      	mov	lr, r3
 8004c0e:	4770      	bx	lr
